<!------------------------------------------------------------------------------------------------------------------------------------------------------------------CONTENT-->
<!-- content -->
<script type="text/javascript">
    var simulating;
    function SimulateSwitch() {
        removeData(window.myLine);
        simulating = !simulating;
        if (simulating == true) {
            $("#myButton").removeClass("btn-danger").addClass("btn-sucess");
            $("#myButton").text('Monitoring Switch: ON')
        }
        else {
            $("#myButton").removeClass("btn-success").addClass("btn-danger");
            $("#myButton").text('Monitoring Switch: OFF')
        }
        addData();
    }
    function addData() {// pass your data in method
        var statusText = document.getElementById('Status');
        if (simulating == false) {
            statusText.firstChild.nodeValue = "Not Monitoring";
            return;
        }
        else {
            statusText.firstChild.nodeValue = "Monitoring";
        }

        var packetsToDisplay = 20;

        var str1 = "http://157.230.247.159:3000/";
        var str2 = document.getElementById('LegioGuardIDText').value;
        var str3 = "/last/"
        var str4 = packetsToDisplay;
        
        var res = str1.concat(str2);
        var res2 = res.concat(str3);
        var res3 = res2.concat(str4);

        var lgid = document.getElementById('LegioGuardIDText').value;
        $.ajax({
            type: "GET",
            url: res3,
            //data: lgid,//JSON.stringify(data),// now data come in this function
            contentType: "application/json; charset=utf-8",
            crossDomain: true,
            dataType: "json",
            success: function (data, status, jqXHR) {
                //var LastBroadcastTimeText = document.getElementById('LastBroadcastTime');
                //LastBroadcastTimeText.firstChild.nodeValue = (data[0].time);
                //var sensor1text = document.getElementById('s1text');
                //sensor1text.firstChild.nodeValue = (JSON.stringify(data[0].sensor1));
                //var sensor2text = document.getElementById('s2text');
                //sensor2text.firstChild.nodeValue = (data[0].sensor2);
                //var sensor3text = document.getElementById('s2text');
                //sensor3text.firstChild.nodeValue = (data[0].sensor3);
                var APIReplyText = document.getElementById('APIResponse');
                APIReplyText.firstChild.nodeValue = "OK!"//JSON.stringify(jqXHR);
                //if (data[0].sensor1 == null || data[0].sensor1 == 0) {
                //    $('#sensor1dtext').val("No data");
                //    $('#sensor2dtext').val('No data');
                //    $('#sensor3dtext').val('No data');
                //    $('#LastBroadcastTime').val('No data');
                //}
                //if (data = [])
                //{
                //    $('#sensor1dtext').val("No data");
                //    $('#sensor2dtext').val('No data');
                //    $('#sensor3dtext').val('No data');
                //    $('#LastBroadcastTime').val('No data');
                //}
                var expressedData = data[0];
                var maxPackets = packetsToDisplay;
                for (var ed = 0; ed < 10; ed++) {
                    const dataCheck = data[ed];
                    if (dataCheck == null) {
                        maxPackets = ed - 1;
                        console.log(maxPackets + "data check phase");
                    }
                }
                var maxPacketsFinal;
                if (maxPackets < packetsToDisplay) {
                    maxPacketsFinal = maxPackets;
                }
                else {
                    maxPacketsFinal = packetsToDisplay;
                }
                console.log(maxPacketsFinal);
                if (expressedData != null)
                {
                    $('#sensor1dtext').val(data[0].sensor1);
                    $('#sensor2dtext').val(data[0].sensor2);
                    $('#sensor3dtext').val(data[0].sensor3);
                    $('#LastBroadcastTime').val(data[0].time);
                    var sensor1chardata = [];
                    for (var i = 0; i < maxPacketsFinal; i++) {
                        sensor1chardata.push(data[i].sensor1);
                    }
                    var sensor2chardata = [];
                    for (var i = 0; i < maxPacketsFinal; i++) {
                        sensor2chardata.push(data[i].sensor2);
                    }
                    var sensor3chardata = [];
                    for (var i = 0; i < maxPacketsFinal; i++) {
                        sensor3chardata.push(data[i].sensor3);
                    }
                    var timeChartValues = [];
                    for (var i = 0; i < maxPacketsFinal; i++) {
                        var jsTime = new Date(data[i].time);
                        var localTime = jsTime.toLocaleTimeString();
                        var hours = jsTime.getHours();
                        var minutes = jsTime.getMinutes();
                        var seconds = jsTime.getSeconds();
                        var formattedTime = hours + ':' + minutes + ':' + seconds;
                        timeChartValues.push(localTime);
                    }
                    chartupdater(window.myLine, sensor1chardata, 0);
                    chartupdater(window.myLine, sensor2chardata, 1);
                    chartupdater(window.myLine, sensor3chardata, 2);
                    labelchartupdater(window.myLine, timeChartValues);
                }
                else {
                    $('#sensor1dtext').val("No data");
                    $('#sensor2dtext').val('No data');
                    $('#sensor3dtext').val('No data');
                    $('#LastBroadcastTime').val('No data');
                }
            },

            error: function (jqXHR, status) {
                //var LastBroadcastTimeText = document.getElementById('LastBroadcastTime');
                //LastBroadcastTimeText.firstChild.nodeValue = (date);
                //console.log(jqXHR);
                $('#sensor1dtext').val("error");
                $('#sensor2dtext').val('error');
                $('#sensor3dtext').val('error');
                $('#LastBroadcastTime').val('error');
                var APIReplyText = document.getElementById('APIResponse');
                APIReplyText.firstChild.nodeValue = JSON.stringify(jqXHR);
            }
        });

        setTimeout(addData, 2000);
    }

    var chartfig = {
        type: 'line',
        data: {
            //labels: ["fa", "March", "April", "May", "June", "July"],
            labels: ["1","2","3","4","5","6","7","8","9","10"],
            datasets: [{
                label: "Sensor 1",
                data: [0],
                borderColor: 'rgba(241,95,121, 0.2)',
                backgroundColor: 'rgba(241,95,121, 0.5)',
                pointBorderColor: 'rgba(241,95,121, 0.3)',
                pointBackgroundColor: 'rgba(241,95,121, 0.2)',
                pointBorderWidth: 1
            }, {
                label: "Sensor 2",
                data: [0],
                borderColor: 'rgba(140,147,154, 0.2)',
                backgroundColor: 'rgba(140,147,154, 0.2)',
                pointBorderColor: 'rgba(140,147,154, 0)',
                pointBackgroundColor: 'rgba(140,147,154, 0.9)',
                pointBorderWidth: 1

            }, {
                label: "Sensor 3",
                data: [0],
                borderColor: 'rgba(140,147,154, 0.2)',
                backgroundColor: 'rgba(140,147,154, 0.2)',
                pointBorderColor: 'rgba(140,147,154, 0)',
                pointBackgroundColor: 'rgba(140,147,154, 0.9)',
                pointBorderWidth: 1
            }]
        },
        options: {
            responsive: true,
            legend: false,

        }
    }
    window.onload = function () {
        var ctx = document.getElementById('line_chart').getContext('2d');
        window.myLine = new Chart(ctx, chartfig);
    };

    function chartupdater(chart, data, num) {
        chart.data.datasets[num].data = data;
        chart.update();
    }
    function labelchartupdater(chart, data) {
        chart.data.labels = data;
        chart.update();
    }
    function removeData(chart) {
        chart.data.labels.pop();
        chart.data.datasets.forEach((dataset) => {
            dataset.data.pop();
        });
        chart.update();
    }
</script>

<section class="content">
    <div class="container">
        <div class="row clearfix">
            <div class="col-lg-12">
                <div class="card">
                    <div class="body block-header">
                        <div class="row">
                            <div class="col-lg-6 col-md-8 col-sm-12">
                                <h2>Realtime Monitoring</h2>
                                <ul class="breadcrumb p-l-0 p-b-0 ">
                                    <li class="breadcrumb-item active">Select IOT device ID to begin monitoring</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row clearfix">
            <div class="col-lg-3 col-md-12 col-sm-12">
                <div class="card">
                    <div class="body">
                        <h6>Device Broadcast ID</h6>
                        <input type="text" class="form-control" id="LegioGuardIDText" value="" />
                        <br />
                        <button class="btn btn-warning" id="myButton" onclick="SimulateSwitch()">Monitoring Switch: Off </button>
                        <br />
                        <h6>Monitoring Status:</h6>
                        <h7 id="Status">Not Connected</h7>
                        <br />
                        <br />
                        <h6>Sensor 1:</h6>
                        <input type="text" style="border:none" class="form-control" id="sensor1dtext" value="" />
                        <br />
                        <br />
                        <h6>Sensor 2:</h6>
                        <input type="text" style="border:none" class="form-control" id="sensor2dtext" value="" />
                        <br />
                        <br />
                        <h6>Sensor 3:</h6>
                        <input type="text" style="border:none" class="form-control" id="sensor3dtext" value="" />
                        <br />
                        <br />
                        <h6>Last data recieved at: </h6>
                        <input type="text" style="border:none" class="form-control" id="LastBroadcastTime" value="" />
                        <br />
                        <br />
                        <h6>Response from API server: </h6>
                        <h7 id="APIResponse">No Response</h7>
                        <br />
                        <br />
                    </div>
                </div>
            </div>

            <div class="col-lg-9 col-md-12">
                <div class="card">
                    <div class="header">
                        <h2><strong>Realtime Chart</strong></h2>
                        <ul class="header-dropdown">
                            <li class="dropdown">
                                <a href="javascript:void(0);" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"> <i class="zmdi zmdi-more"></i> </a>
                                <ul class="dropdown-menu dropdown-menu-right">
                                    <li><a href="javascript:void(0);">Action</a></li>
                                    <li><a href="javascript:void(0);">Another action</a></li>
                                    <li><a href="javascript:void(0);">Something else</a></li>
                                </ul>
                            </li>
                            <li class="remove">
                                <a role="button" class="boxs-close"><i class="zmdi zmdi-close"></i></a>
                            </li>
                        </ul>
                    </div>
                    <div class="body">
                        <iframe class="chartjs-hidden-iframe" style="width: 100%; display: block; border: 0px; height: 0px; margin: 0px; position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;"></iframe>
                        <canvas id="line_chart" height="300" width="600" style="display: block; width: 480px; height: 240px;"></canvas>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>
</section>

