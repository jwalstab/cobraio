<link href="assets/scroll.css" rel="stylesheet">

<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

<script type="text/javascript" src="assets/highcharts.js"></script>

<section class="content">
    <div class="container">
        <div class="row clearfix">
            <div class="col-lg-12">
                <div class="card">
                    <div class="body block-header">
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12">
                                <h2>RealTime IoT Device Monitor</h2>
                                <ul class="breadcrumb p-l-0 p-b-0" id="responsebody">
                                    <li class="breadcrumb-item active">Select an IoT device to monitor incoming data in realtime</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
            <div class="col-lg-12 col-md-12">
                    <div class="card">
<!--                         <div class="header" id="rheader">
                            <h2><strong>Loading chart...</strong></h2>

                            </div>
                        </div> -->
                        <div class="body">
                                <div class="dropdown">
                                        <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                          Select Device
                                          <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenu1" id="deviceSelectMenu">
                                        </ul>
                                </div>
                                <div id="chart2">
                                        <div id="container" style="width:100%; height:400px;"></div>
                                </div>
                        </div>
                    </div>
            </div>
        </div>
    </div>

</section>

<script>

    LoadDeviceSelectBox();
    GetDataFromAPI();
    var chosenDevice;
    var chart;
    var firstChartLoad = true;
    var pullAmount;
    var deviceChanged;
    var keyNames = [];

    function LoadDeviceSelectBox(){
        var dropboxURL = masterURL + "/jwalstab/lookup_devices/";
        $.ajax({type: "GET", url: dropboxURL, contentType: "application/json; charset=utf-8", crossDomain: true,  dataType: "json",
            success: function (data, status, jqXHR) {
                //creates the links in the dropdown menu and populates device list
                deviceList = [];
                data.forEach(element => {
                    var newlink = $('<li><a href="#" data-value="action">' + element.devicename + '</a></li>');
                    $('#deviceSelectMenu').append(newlink);
                    deviceList.push(element);
                });

                //adds code to change when device selected
                $("#deviceSelectMenu li a").click(function(){
                    $(this).parents(".dropdown").find('.btn').html($(this).text() + ' <span class="caret"></span>');
                    $(this).parents(".dropdown").find('.btn').val($(this).data('value'));
                    var selectedvaluefromdropdownbox = $(this).parents(".dropdown").find('.btn').val($(this).data('value'));
                    deviceList.forEach(element => {
                        if (element.devicename == selectedvaluefromdropdownbox[0].innerText)
                        {
                            chosenDevice = element.deviceID;
                            chosenDeviceName = element.devicename;
                        }
                    });
                    console.log(chosenDevice);
                    deviceChanged = true;
                    DisplayResult("loading");
                    });
            },
            error: function (jqXHR, status) {
                console.log("ERROR");
            }
        });
    }

    function GetDataFromAPI(){
        if (firstChartLoad == true){ pullAmount = 1}
        else{
            pullAmount = 1;
        }
        if (chosenDevice != null){
            //CHECKS IF THERES A DEVICE CHANGE, DELETES AND RELOADS PLOT
            if (deviceChanged == true){
                firstChartLoad = true;
                //delete and create new chart here
                deviceChanged = false;
            }
            var lastDataURL = masterURL + "/" + chosenDevice + "/last/" + pullAmount;
            $.ajax({
            type: "GET",
            url: lastDataURL,
            contentType: "application/json; charset=utf-8",
            crossDomain: true,
            dataType: "json",
            success: function (data, status, jqXHR) {
                if (firstChartLoad == true){
                    console.log("FIRST!");
                    firstChartLoad = false;
                    UpdateChart(data,true);
                }
                else{
                    DisplayResult("loaded");
                    UpdateChart(data,false);
                }
            },
            error: function (jqXHR, status) {
                console.log("jqXHYR:" + jqXHR + "status:" + status)
            }
        });
        }
        else
        {
            console.log("No device selected!");
        }
    setTimeout(GetDataFromAPI, 10000);
    }

    function UpdateChart(data,firstTimeToLoad,dataNumber){
    if (data[0] != null)
            {
                if (firstTimeToLoad == true){
                    keyNames = [];
                    var getLabelsSmall = Object.keys(data[0]);
                    getLabelsSmall.forEach(element => { //gets labels for buttons
                        if (element == "time" || element == "_id"){//makes sure not to add buttons for time or datapacket ID
                        }
                        else
                        {
                        keyNames.push(element);
                        }
                    });
                }
                var collectingTime = true;
                var xArray = [];
                keyCounter = 0;
                keyNames.forEach(propname => {
                    var isABool = false;
                    var boolArray = [];
                    var DataToPush = [];
                    var yArray = [];
                    data.forEach(globalpiece => {
                        if (globalpiece[propname] != null)
                            {
                                if (typeof globalpiece[propname] === "boolean"){
                                    isABool = true;
                                    if (globalpiece[propname] == true)
                                    {
                                        globalpiece[propname] = 20;
                                        boolArray.push("On");
                                    }
                                    else
                                    {
                                        (globalpiece[propname] = -20);
                                        boolArray.push("Off");
                                    }
                                }
                                var miniArray = [];
                                var timeS = new Date(globalpiece.time);
                                var timeSR = timeS.getTime();
                                miniArray.push(timeSR, globalpiece[propname]);
                                yArray.push(miniArray);
                                //if (collectingTime == true){xArray.push(globalpiece.time);}
                                }
                    });
                    //if (collectingTime == true){collectingTime = false;}
                    if (isABool == false){
                        var ploatLoadData = {
                            type: 'line',
                            name: propname,
                            data: yArray,
                            visible: false
                        };
                    }
                    else{
                        var ploatLoadData = {
                            type: 'line',
                            name: propname,
                            data: yArray,
                            visible: false
                        };
                    }
                    if (firstTimeToLoad == true){chart1.addSeries(ploatLoadData)}
                    else{
                        console.log("B");
                        if (isABool == true){
                            console.log(yArray);
                            chart1.series[keyCounter].addPoint(yArray[0]);
                        }
                            else{
                                console.log(yArray);
                                chart1.series[keyCounter].addPoint(yArray[0]);
                            }
                            console.log("e");
                            keyCounter++;  
                    }
                });
            
            }
    }

    function DisplayResult(result, errdetails){
        //clear the header and body of results
        var myNode2 = document.getElementById("responsebody");
        while (myNode2.firstChild) {
        myNode2.removeChild(myNode2.firstChild);
        }

        if (result == "loading")
        {
            var rbody = $('<p>Now loading realtime monitoring for the IoT device ' + chosenDeviceName + '</p>');
        }
        if (result == "loaded")
        {
            var dt = new Date();
            var dtl = dt.toLocaleString();
            var rbody = $('<p>Currently monitoring IoT device ' + chosenDeviceName + ', last data recieved at '+ dtl +'</p>');
        }
        $('#responsebody').append(rbody);
        }
    
    var datat = [[1167609600000,0.7537], [1167696000000,0.7537]]

    var chart1 = Highcharts.chart('container', {
            chart: {
                zoomType: 'x'
            },
            title: {
                text: 'SensorValues'
            },
            subtitle: {
                text: document.ontouchstart === undefined ?
                    'Click and drag in the plot area to zoom in' : 'Pinch the chart to zoom in'
            },
            xAxis: {
                type: 'datetime'
            },
            yAxis: {
                title: {
                    text: 'Exchange rate'
                }
            },
            legend: {
                enabled: true
            },
            plotOptions: {
/*                 line: {
                    dataLabels: {
                        enabled: true
                    },
                    enableMouseTracking: false
                    }, */
                area: {
                    fillColor: {
                        linearGradient: {
                            x1: 0,
                            y1: 0,
                            x2: 0,
                            y2: 1
                        },
                        stops: [
                            [0, Highcharts.getOptions().colors[0]],
                            [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
                        ]
                    },
                    marker: {
                        radius: 2
                    },
                    lineWidth: 1,
                    states: {
                        hover: {
                            lineWidth: 1
                        }
                    },
                    threshold: null
                }
            },

            series: [{
                type: 'area',
                name: 'USD to EUR',
                data: datat
            }]
        });

    chart1.series[0].remove();
/*         chart.addSeries({
            data: [194.1, 95.6, 54.4, 29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4]
        }); */

    //chart1.series[0].addPoint(  [5, dateNow]  );


/*         document.addEventListener('DOMContentLoaded', function () {
        var myChart = Highcharts.chart('container', {
        chart: {
            type: 'bar'
        },
        title: {
            text: 'Fruit Consumption'
        },
        xAxis: {
            categories: ['Apples', 'Bananas', 'Oranges']
        },
        yAxis: {
            title: {
                text: 'Fruit eaten'
            }
        },
        series: [{
            name: 'Jane',
            data: [1, 0, 4]
        }, {
            name: 'John',
            data: [5, 7, 3]
        }]
    }); */
/* }); */
</script>

