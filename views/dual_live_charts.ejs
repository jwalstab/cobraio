<link href="assets/scroll.css" rel="stylesheet">

<!-- <script type="text/javascript" src="assets/highcharts.js"></script> -->
<script src="assets/highstock.js"></script>
<script src="assets/exporting.js"></script>
<script src="assets/export-data.js"></script>

<br>
    

<div class="col-lg-12 col-md-12">
    <div class="card">
        <div class="showback">
            <!-- Single button -->
            <div class="btn-group">
                <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                Select Device U1 <span class="caret"></span>
                </button>
                <ul class="dropdown-menu scrollable-menu" id="deviceSelectMenu">
                </ul>
            </div>
            <!-- Single button -->
        <div class="btn-group">
                <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                Select Device U2 <span class="caret"></span>
                </button>
                <ul class="dropdown-menu scrollable-menu" id="deviceSelectMenuDEVICE2">
                </ul>
        </div>      
        <div id="chart2">
                <div id="containerC" style="width:100%; height:600px;"></div>
        </div>
    </div>
</div>

</div>


<!-- <div class="col-lg-12 col-md-12">
        <div class="card">
            <div class="btn-group">
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                        Select Device
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenu1" id="deviceSelectMenu">
                    </ul>
                </div>
                <div class="dropdown">
                    <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                        Select Device
                        <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenu1" id="deviceSelectMenuDEVICE2">
                    </ul>
                </div>
            </div>
            <div id="chart2">
                    <div id="containerC" style="width:100%; height:600px;"></div>
            </div>
        </div>
    </div> -->

<script>

    LoadDeviceSelectBox();
    DEVICE2_LoadDeviceSelectBox();
    
    var chosenDeviceBox;
    var chosenDevice = 0;
    var chosenDeviceName;
    var chart;
    var firstChartLoad = true;
    var pullAmount;
    var deviceChanged;
    var sizer;

    var firstChoice = 0;
    var firstChoiceDevice2 = 0;

    var DEVICE2chosenDeviceBox;
    var DEVICE2_chosenDevice = 0;
    var DEVICE2_chosenDeviceName;
    var DEVICE2_firstChartLoad = true;
    var DEVICE2_pullAmount;
    var DEVICE2_deviceChanged;
    var DEVICE2_sizer;

    var dataUpdateTimeout;

    function LoadDeviceSelectBox(){
        var dropboxURL = masterURL + "/<%= loggedInPool %>/lookup_devices/";
        console.log(dropboxURL);
        $.ajax({type: "GET", url: dropboxURL, contentType: "application/json; charset=utf-8", crossDomain: true,  dataType: "json",
            success: function (data, status, jqXHR) {
                //creates the links in the dropdown menu and populates device list
                deviceList = [];
                data.forEach(element => {
                    var newlink = $('<li><a href="#" data-value="action">' + element.devicename + '</a></li>');
                    $('#deviceSelectMenu').append(newlink);
                    deviceList.push(element);
                });

                //adds code to change when device selected
                $("#deviceSelectMenu li a").click(function(){
                    $(this).parents(".btn-group").find('.btn').html($(this).text() + '<span class="caret"></span>');
                    $(this).parents(".btn-group").find('.btn').val($(this).data('value'));
                    var bla = $(this).parents(".btn-group").find('.btn').val($(this).data('value'));
                    var selectedvaluefromdropdownbox = $(this).parents(".btn-group").find('.btn').val($(this).data('value'));
                    deviceList.forEach(element => {
                        if (element.devicename == selectedvaluefromdropdownbox[0].innerText)
                        {
                            chosenDeviceBox = element.deviceID;
                            chosenDeviceName = element.devicename;
                        }
                    });
                    console.log(chosenDeviceBox);
                    deviceChanged = true;
                    firstChoice = 1;
                    DataUpdate();
                    });
            },
            error: function (jqXHR, status) {
                console.log("ERROR");
            }
        });
    }    
    function DEVICE2_LoadDeviceSelectBox(){
        var dropboxURL = masterURL + "/<%= loggedInPool %>/lookup_devices/";
        console.log(dropboxURL);
        $.ajax({type: "GET", url: dropboxURL, contentType: "application/json; charset=utf-8", crossDomain: true,  dataType: "json",
            success: function (data, status, jqXHR) {
                //creates the links in the dropdown menu and populates device list
                DEVICE2_deviceList = [];
                data.forEach(element => {
                    var newlink = $('<li><a href="#" data-value="action">' + element.devicename + '</a></li>');
                    $('#deviceSelectMenuDEVICE2').append(newlink);
                    DEVICE2_deviceList.push(element);
                });

                //adds code to change when device selected
                $("#deviceSelectMenuDEVICE2 li a").click(function(){
                    $(this).parents(".btn-group").find('.btn').html($(this).text() + '<span class="caret"></span>');
                    $(this).parents(".btn-group").find('.btn').val($(this).data('value'));
                    var selectedvaluefromdropdownbox = $(this).parents(".btn-group").find('.btn').val($(this).data('value'));
                    DEVICE2_deviceList.forEach(element => {
                        if (element.devicename == selectedvaluefromdropdownbox[0].innerText)
                        {
                            DEVICE2_chosenDeviceBox = element.deviceID;
                            DEVICE2_chosenDeviceName = element.devicename;
                        }
                    });
                    console.log(DEVICE2_chosenDeviceBox);
                    DEVICE2_deviceChanged = true;
                    firstChoiceDevice2 = 1;
                    DataUpdate();
                    });
            },
            error: function (jqXHR, status) {
                console.log("ERROR");
            }
        });
    }    
    
    function GetFirstData(){
            var lastDataURL = masterURL + "/" + chosenDevice + "/" + DEVICE2_chosenDevice + "/dualgraphstart/" + 1;
            $.ajax({
            type: "GET",
            url: lastDataURL,
            contentType: "application/json; charset=utf-8",
            crossDomain: true,
            //dataType: "json",
            success: function (data, status, jqXHR) {
                if (data == "Null"){
                    chart1.setTitle({text: "The device " + chosenDeviceName + " has not sent any data to the system."});
                    return;
                }
                sizer = data.length;
                data.forEach(element => {
                    chart1.addSeries(element);
                });
                DataUpdate();
            },
            error: function (jqXHR, status) {
                console.log("jqXHYR:" + jqXHR + "status:" + status)
            }
        });
    }
    function DataUpdate(){
        console.log("data update");
        if (firstChoice == 0 || firstChoiceDevice2 == 0){
            return;
        }
        if (deviceChanged || DEVICE2_deviceChanged == true)
        {
            chart1.setTitle({text: "Now connecting to " + chosenDeviceName + " and " + DEVICE2_chosenDeviceName});
            console.log(DEVICE2_chosenDeviceBox);
            chosenDevice = chosenDeviceBox;
            DEVICE2_chosenDevice = DEVICE2_chosenDeviceBox;
            clearTimeout(dataUpdateTimeout);
            deviceChanged = false;
            DEVICE2_deviceChanged = false;
            pullAmount = 100;
            while (sizer > 0) {
                chart1.series[0].remove();
                sizer--;
            }
            GetFirstData();
            return;
        }
        var lastDataURL = masterURL + "/" + chosenDevice + "/" + DEVICE2_chosenDevice + "/duallivechartupdate/" + pullAmount;
        $.ajax({
        type: "GET",
        url: lastDataURL,
        contentType: "application/json; charset=utf-8",
        crossDomain: true,
        dataType: "json",
        success: function (data, status, jqXHR) {

        if (pullAmount == 1){
            var dt = new Date();
            var dtl = dt.toLocaleString();
            chart1.setTitle({text: "Now monitoring " + chosenDeviceName + " and " + DEVICE2_chosenDeviceName + ". Last data recieved at :" + dtl});
        }
        
        data.forEach(element => {
            for (let index = 0; index < sizer; index++) {
                console.log(element[index] + "          at pos"  +index)
                chart1.series[index].addPoint(element[index], false);
            }
        });
        console.log(chart1.series);
        pullAmount = 1;
        chart1.redraw();
        dataUpdateTimeout = setTimeout(DataUpdate, 5000);
        
        },
        error: function (jqXHR, status) {
            console.log("jqXHYR:" + jqXHR + "status:" + status)
        }
    });
}

    var checker = function(ba){
        if (ba > 0){
            return 'On';
        }
        else
        {
            return 'Off';
        }
    }
    var datat = [[1167609600000,0.7537], [1167696000000,0.7537]]
    var chart1 = Highcharts.stockChart('containerC', {
        chart: {
    /*         events: {
                load: function () {
    
                    // set up the updating of the chart each second
                    var series = this.series[0];
                    setInterval(function () {
                        var x = (new Date()).getTime(), // current time
                            y = Math.round(Math.random() * 100);
                        series.addPoint([x, y], true, true);
                    }, 1000);
                }
            } */
        },
        legend: {
            enabled: true,
            maxHeight: 100,
            labelFormatter: function() {
                if (this.userOptions.type == "line"){ 
                    var lastVal = this.yData[this.yData.length - 1];
                    return '<span>' + this.name + ':</span> <b>' + lastVal + '</b> </n>';
                }
                else{
                    var lastVal = this.yData[this.yData.length - 1];
                    if (lastVal > 0){
                        return '<span>' + this.name + ':</span> <b> On </b> <span style="color: #ADFF2F"> ▲ </span> </n>';
                    }
                    else{
                        return '<span>' + this.name + ':</span> <b> Off </b> <span style="color: #FF0000"> ▼ </span> </n>';
                    }
                    //▼▲♦
                }
                
            }
        },
        tooltip: {
                xDateFormat: '%d/%m/%Y %H:%M:%S',
                shared: true,
                split: false,
                enabled: true,
            },
        plotOptions: {
            area : {
                    tooltip: {
                        pointFormatter: function() {
                            var symbol = '●';
                            if (this.y > 0){
                                //return "" + this.series.name + " On";
                                return '<span style="color:' + this.series.color + '">' + symbol + '</span> <span>' + this.series.name + ': On </span><span style="color: #ADFF2F"> ▲ </span> <br/>'
                            }
                            else{
                                return '<span style="color:' + this.series.color + '">' + symbol + '</span> <span>' + this.series.name + ': Off </span><span style="color: #FF0000"> ▼ </span> <br/>'
                            }
                        }
                    }
            },
        },
    
        rangeSelector: {
            buttons: [{
                count: 5,
                type: 'minute',
                text: '5M'
            }, {
                count: 15,
                type: 'minute',
                text: '15M'
            }, {
                count: 1,
                type: 'hour',
                text: '1Hr'
            }, {
                type: 'all',
                text: 'All'
            }],
            inputEnabled: false,
            selected: 0
        },
        title: {
            text: 'Live Monitor Chart'
        },
    
        exporting: {
            enabled: false
        },
        series: [{
                    type: 'area',
                    name: 'empty',
                    data: datat
        }]
    });
    chart1.series[0].remove();
</script>

