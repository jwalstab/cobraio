<!-- <link href="assets/scroll.css" rel="stylesheet"> -->
<!-- 
<script type="text/javascript" src="assets/highcharts.js"></script>
 -->
 <script src="assets/highstock.js"></script>
 <script src="assets/exporting.js"></script>
 <script src="assets/export-data.js"></script>


<br>


<div class="col-lg-12 col-md-12">
    <div class="card">
        <div class="showback">
            <div class="btn-group">
                    <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                    Select Device U1 <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu scrollable-menu" id="deviceSelectMenu">
                    </ul>
            </div>
            <button class="btn btn-primary" id="backloadbutton" onclick="BackLoadButton()">Load 24 Hrs of data</button>
                <div id="chart2">
                        <div id="containerC" style="width:100%; height:600px;"></div>
                </div>
            </div>
        </div>
    </div>
</div>
<script>

LoadDeviceSelectBox();
    var chosenDeviceBox;
    var chosenDevice;
    var chosenDeviceName;
    var chart;
    var firstChartLoad = true;
    var pullAmount;
    var deviceChanged;
    var sizer;
    var countingMagic = 0;
    var pullAmount = 100;

    var dataUpdateTimeout;
var datat = [[1167609600000,0.7537], [1167696000000,0.7537]]
var chart1 = Highcharts.stockChart('containerC', {
    chart: {
/*         events: {
            load: function () {

                // set up the updating of the chart each second
                var series = this.series[0];
                setInterval(function () {
                    var x = (new Date()).getTime(), // current time
                        y = Math.round(Math.random() * 100);
                    series.addPoint([x, y], true, true);
                }, 1000);
            }
        } */
    },
    legend: {
        enabled: true,
        maxHeight: 100,
        labelFormatter: function() {
            if (this.userOptions.type == "line"){ 
                var lastVal = this.yData[this.yData.length - 1];
                return '<span>' + this.name + ':</span> <b>' + lastVal + '</b> </n>';
            }
            else{
                var lastVal = this.yData[this.yData.length - 1];
                if (lastVal > 0){
                    return '<span>' + this.name + ':</span> <b> On </b> <span style="color: #ADFF2F"> ▲ </span> </n>';
                }
                else{
                    return '<span>' + this.name + ':</span> <b> Off </b> <span style="color: #FF0000"> ▼ </span> </n>';
                }
                //▼▲♦
            }
            
        }
    },
    tooltip: {
            xDateFormat: '%d/%m/%Y %H:%M:%S',
            shared: true,
            split: false,
            enabled: true,
        },
    plotOptions: {
        area : {
                tooltip: {
                    pointFormatter: function() {
                        var symbol = '●';
                        if (this.y > 0){
                            //return "" + this.series.name + " On";
                            return '<span style="color:' + this.series.color + '">' + symbol + '</span> <span>' + this.series.name + ': On </span><span style="color: #ADFF2F"> ▲ </span> <br/>'
                        }
                        else{
                            return '<span style="color:' + this.series.color + '">' + symbol + '</span> <span>' + this.series.name + ': Off </span><span style="color: #FF0000"> ▼ </span> <br/>'
                        }
                    }
                }
        },
    },

    rangeSelector: {
        buttons: [{
            count: 5,
            type: 'minute',
            text: '5M'
        }, {
            count: 15,
            type: 'minute',
            text: '15M '
        }, {
            count: 30,
            type: 'minute',
            text: '30M'
        }, {
            count: 1,
            type: 'hour',
            text: '1H'
        }, {
            count: 6,
            type: 'hour',
            text: '6H'
        }, {
            count: 12,
            type: 'hour',
            text: '12H'
        }, {
            //count: 24,
            //type: 'hour',
            //text: '24H'
            type: 'all',
            text: 'All'
        }],
        inputEnabled: false,
        selected: 0
    },
    title: {
        text: 'Live Monitor Chart'
    },

    exporting: {
        enabled: false
    },
    series: [{
                type: 'area',
                name: 'empty',
                data: datat
    }]
});
chart1.series[0].remove();

function LoadDeviceSelectBox(){
        //var dropboxURL = masterURL + "/<%= loggedInPool %>/lookup_devices/";
        var dropboxURL = masterURL + "/Quantum/lookup_devices/";
        console.log(dropboxURL);
        $.ajax({type: "GET", url: dropboxURL, contentType: "application/json; charset=utf-8", crossDomain: true,  dataType: "json",
            success: function (data, status, jqXHR) {
                //creates the links in the dropdown menu and populates device list
                deviceList = [];
                data.forEach(element => {
                    var newlink = $('<li><a href="#" data-value="action">' + element.devicename + '</a></li>');
                    $('#deviceSelectMenu').append(newlink);
                    deviceList.push(element);
                });

                //adds code to change when device selected
                $("#deviceSelectMenu li a").click(function(){
                    $(this).parents(".btn-group").find('.btn').html($(this).text() + '<span class="caret"></span>');
                    $(this).parents(".btn-group").find('.btn').val($(this).data('value'));
                    var selectedvaluefromdropdownbox = $(this).parents(".btn-group").find('.btn').val($(this).data('value'));
                    deviceList.forEach(element => {
                        console.log(selectedvaluefromdropdownbox[0].innerText);
                        if (element.devicename == selectedvaluefromdropdownbox[0].innerText)
                        {
                            chosenDeviceBox = element.deviceID;
                            chosenDeviceName = element.devicename;
                        }
                    });
                    console.log(chosenDeviceBox);
                    deviceChanged = true;
                    backLoadButtonPressed = false;
                    chart1.setTitle({text: "Connecting to device: " + chosenDeviceName});
                    DataUpdate();
                    });
            },
            error: function (jqXHR, status) {
                console.log("ERROR");
            }
        });
    }    

function GetFirstData(){
            var lastDataURL = masterURL + "/" + chosenDevice + "/monitorgraphstart/" + 1;
            $.ajax({
            type: "GET",
            url: lastDataURL,
            contentType: "application/json; charset=utf-8",
            crossDomain: true,
            //dataType: "json",
            success: function (data, status, jqXHR) {
                if (data == "Null"){
                    chart1.setTitle({text: "The device " + chosenDeviceName + " has not sent any data to the system."});
                    return;
                }
                console.log(data);
                sizer = data.length;
                data.forEach(element => {
                    chart1.addSeries(element);
                });
                DataUpdate();
            },
            error: function (jqXHR, status) {
                console.log("jqXHYR:" + jqXHR + "status:" + status)
            }
        });
    }

var deviceChanged = true;
var loadNumber = 1000;
function DataUpdate(){
    if (deviceChanged == true)
    {
        chosenDevice = chosenDeviceBox;
        clearTimeout(dataUpdateTimeout);
        deviceChanged = false;
        while (sizer > 0) {
            chart1.series[0].remove();
            sizer--;
        }
        pullAmount = 100;
        GetFirstData();
        return;
    }
    
    var lastDataURL = masterURL + "/" + chosenDevice + "/monitorgraphbigupdate/" + pullAmount;
    $.ajax({
    type: "GET",
    url: lastDataURL,
    contentType: "application/json; charset=utf-8",
    crossDomain: true,
    dataType: "json",
    success: function (data, status, jqXHR) {
        if (pullAmount === 1)
        {
            var dt = new Date();
            var dtl = dt.toLocaleString();
            chart1.setTitle({text: "Now monitoring " + chosenDeviceName + ". Last data recieved at :" + dtl});
            //BackLoad();
        }
        data.forEach(element => {
            for (let index = 0; index < sizer; index++) {
                chart1.series[index].addPoint(element[index], false);
            }
        });
        chart1.redraw();
        if (pullAmount === 100){
            chart1.series[20].setVisible(true);
            chart1.rangeSelector.clickButton(6, true);
        }
        dataUpdateTimeout = setTimeout(DataUpdate, 5000);
        pullAmount = 1;
    },
    error: function (jqXHR, status) {
        console.log("jqXHYR:" + jqXHR + "status:" + status)
    }
});
}

var loadCounter = 0;
var backLoadButtonPressed = false;
var backloadAmount = 50;

function BackLoadButton(){
    if (backLoadButtonPressed == false){
        backLoadButtonPressed = true;
        document.getElementById("backloadbutton").className = "btn btn-danger";
        document.getElementById("backloadbutton").innerHTML = "Loading 24 Hour data";
        setTimeout(BackLoad, 5000);
    }
}
function BackLoad(){
            if (chosenDevice == null){
                return;
            }
            if (backLoadButtonPressed == false){
                document.getElementById("backloadbutton").className = "btn btn-primary";
                document.getElementById("backloadbutton").innerHTML = "Load 24 Hrs of data";
                return;
            }
            var lastDataURL = masterURL + "/" + chosenDevice + "/backload/" + loadCounter + "/" + backloadAmount;
            $.ajax({
            type: "GET",
            url: lastDataURL,
            contentType: "application/json; charset=utf-8",
            crossDomain: true,
            dataType: "json",
            success: function (data, status, jqXHR) {
                if (data[0] != null){
                    data.forEach(element => {
                        for (let index = 0; index < sizer; index++) {
                            chart1.series[index].addPoint(element[index], false);
                        }
                    });
                    loadCounter = loadCounter + backloadAmount;
                    chart1.redraw();
                    chart1.rangeSelector.clickButton(6, true);
                    //loadNumber = loadNumber + 500
                    setTimeout(BackLoad, 1000);
                    console.log(data.length);
                    if (data.length < 49){
                        console.log("data length less than 99");
                        document.getElementById("backloadbutton").className = "btn btn-success";
                        document.getElementById("backloadbutton").innerHTML = "24 Hour data loaded";
                    }
                }
            },
            error: function (jqXHR, status) {
                console.log("jqXHYR:" + jqXHR + "status:" + status)
            }
        });
    }
</script>