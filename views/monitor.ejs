<!------------------------------------------------------------------------------------------------------------------------------------------------------------------CONTENT-->
<!-- content -->
<script type="text/javascript">
    var simulating;
    var GlobalData = [];
    var DataKeysToDisplay = [];
    function SimulateSwitch() {
        simulating = !simulating;
        if (simulating == true) {
            $("#myButton").removeClass("btn-danger").addClass("btn-sucess");
            $("#myButton").text('Monitoring Switch: ON')
        }
        else {
            $("#myButton").removeClass("btn-success").addClass("btn-danger");
            $("#myButton").text('Monitoring Switch: OFF')
        }
        AddData();
    }
    function AddData() {
        console.log("Add data func");
        var statusText = document.getElementById('Status');
        if (simulating == false) {
            statusText.firstChild.nodeValue = "Not Monitoring";
            return;
        }
        else {
            statusText.firstChild.nodeValue = "Monitoring";
        }
        var packetsToDisplay = 10;

        var str1 = "http://157.230.247.159:3000/";
        var str2 = document.getElementById('LegioGuardIDText').value;
        var str3 = "/last/"
        var str4 = packetsToDisplay;
        
        var res = str1.concat(str2);
        var res2 = res.concat(str3);
        var res3 = res2.concat(str4);

        var lgid = document.getElementById('LegioGuardIDText').value;
        $.ajax({
            type: "GET",
            url: res3,
            contentType: "application/json; charset=utf-8",
            crossDomain: true,
            dataType: "json",
            success: function (data, status, jqXHR) {
                GlobalData = [];
                data.forEach(element => {
                    GlobalData.push(element);
                });
                //console.log(GlobalData.length);
                var APIReplyText = document.getElementById('APIResponse');
                APIReplyText.firstChild.nodeValue = "OK!"
                //remove later, replace using data.length((((((((((((((((((((()))))))))))))))))))))
                var expressedData = data[0];
                var maxPackets = packetsToDisplay;
                for (var ed = 0; ed < 10; ed++) {
                    const dataCheck = data[ed];
                    if (dataCheck == null) {
                        maxPackets = ed - 1;
                        console.log(maxPackets + "data check phase");
                    }
                }
                var maxPacketsFinal;
                if (maxPackets < packetsToDisplay) {
                    maxPacketsFinal = maxPackets;
                }
                else {
                    maxPacketsFinal = packetsToDisplay;
                }
                ///(((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))
                if (expressedData != null)
                {
                    var keyNames = [];
                    var getLabelsSmall = Object.keys(data[0]);
                    getLabelsSmall.forEach(element => { //gets labels for buttons
                        if (element == "time" || element == "_id"){//makes sure not to add buttons for time or datapacket ID
                        }
                        else
                        {
                        keyNames.push(element);
                        }
                    });
                    var buttonContainer = document.getElementById('APIResponse');
                    for (var j = 0; j < keyNames.length; j++)
                    {
                        var checkButtonExists = document.getElementById(keyNames[j]);
                        if (checkButtonExists == null)
                        {
                        console.log("not created");
                        var button = document.createElement("button");
                        //button.type = "button";
                        button.setAttribute('class', 'btn btn-danger');
                        button.setAttribute('id', keyNames[j]);
                        button.setAttribute('value', keyNames[j]);
                        //button.id = keyNames[j];
                        //button.value = keyNames[j];
                        //button.className = "btn btn-danger",
                        button.onclick = function(){
                            var thisButtonID = this.id;
                            console.log(thisButtonID);
                            var alreadyAdded = false;
                            DataKeysToDisplay.forEach(element => {
                                if (element == this.id)
                                {
                                    alreadyAdded = true;
                                }
                            });
                            if (alreadyAdded === true)
                            {
                                var thisButton = document.getElementById(thisButtonID);
                                thisButton.className = "btn btn-danger"
                                ChartRemoveData(window.myLine, thisButtonID);
                                DataKeysToDisplay.pop(thisButtonID);
                                //console.log("removed!");
                                ShowData(false);
                            }
                            else{
                                var thisButton = document.getElementById(thisButtonID);
                                thisButton.className = "btn btn-sucess"
                                ChartRemoveData(window.myLine, thisButtonID);
                                chartAddData(window.myLine, thisButtonID);
                                DataKeysToDisplay.push(thisButtonID);
                                //console.log("added!");
                                ShowData(false);
                            }
                        };
                        buttonContainer.appendChild(button);
                        }
                    }
                    //END CREATE BUTTONS !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                    //console.log(DataKeysToDisplay);
                    //console.log(GlobalData);
                    ShowData(true);
                }
                else {
                    console.log("EXPRESSED DATA NULL!")
                }
            },
            error: function (jqXHR, status) {
                console.log("ERROR");
                $('#LastBroadcastTime').val('error');
                var APIReplyText = document.getElementById('APIResponse');
                APIReplyText.firstChild.nodeValue = JSON.stringify(jqXHR);
            }
        });
    }
    function ShowData(master){
        console.log("show data func");
        TimeArrayToShow = [];
        GlobalData.forEach(element => {
            var jsTime = new Date(element.time);
            let hoursDiff = jsTime.getHours() + jsTime.getTimezoneOffset() / 60;
            let minutesDiff = (jsTime.getMinutes() + jsTime.getTimezoneOffset()) % 60;
            jsTime.setHours(hoursDiff + 1);
            jsTime.setMinutes(minutesDiff);
            var localTime = jsTime.toLocaleTimeString();
            var hours = jsTime.getHours();
            var minutes = jsTime.getMinutes();
            var seconds = jsTime.getSeconds();
            var formattedTime = hours + ':' + minutes + ':' + seconds;
            TimeArrayToShow.push(formattedTime);
        });
        //console.log(TimeArrayToShow);
        labelchartupdater(window.myLine,TimeArrayToShow);
        
        DataKeysToDisplay.forEach(propname => {
            var DataToPush = [];
            //console.log("propname: " + propname);
            GlobalData.forEach(globalpiece => {
                if (globalpiece[propname] != null)
                    {
                        DataToPush.push(globalpiece[propname]);
                    }
            });
            //console.log(DataToPush);
            ChartUpdateDataByName(window.myLine,propname,DataToPush);
        });
        if (master == true)
        {
            setTimeout(AddData, 5000);
        }
    }
    //charts management

    var chartfig = {
        type: 'line',
        data: {
            labels: ["Nothing Loaded..."]
        },
        options: {
				responsive: true,
				title: {
					display: true,
					text: ' '
				},
				tooltips: {
					mode: 'index',
					intersect: false,
				},
				hover: {
					mode: 'nearest',
					intersect: true
				}
			}
    }

    window.onload = function () {
        var ctx = document.getElementById('line_chart').getContext('2d');
        window.myLine = new Chart(ctx, chartfig);
        ChartRemoveAllData(window.myLine);
    };

    function ChartUpdateDataByName(chart, name, data) {
        chart.data.datasets.forEach((dataset) => {
            if (dataset.label == name)
            {
                dataset.data = data;
            }
        });
        chart.update();
    }

    function labelchartupdater(chart, data) {
        chart.data.labels = data;
        chart.update();
    }

    function chartAddData(chart, dataName){
        chart.data.datasets.push({
        label: dataName,
        backgroundColor: getRandomRgb(),//'rgba(241,95,121, 0.5)',
        data: [0],
        fill: false
        });
        chart.update();
    }

    function getRandomRgb() {
    var num = Math.round(0xffffff * Math.random());
    var r = num >> 16;
    var g = num >> 8 & 255;
    var b = num & 255;
    return 'rgb(' + r + ', ' + g + ', ' + b + ')';
    }

    function ChartRemoveData(chart, dataName){
        chart.data.datasets.forEach((dataset) => {
            if (dataset.label == dataName)
            {
                //console.log("FOUND dataset with matching label!");
                //dataset.data.pop();
                let removalIndex = chart.data.datasets.indexOf(dataset); //Locate index of ds1
                if(removalIndex >= 0) 
                {
                    chart.data.datasets.splice(removalIndex, 1);
                }
            }
        });
        chart.update();
    }
    function ChartRemoveAllData(chart) {
        chart.data.labels.pop();
        chart.data.datasets.forEach((dataset) => {
            dataset.data.pop();
        });
        chart.update();
    }
</script>

<section class="content">
    <div class="container">
        <div class="row clearfix">
            <div class="col-lg-12">
                <div class="card">
                    <div class="body block-header">
                        <div class="row">
                            <div class="col-lg-6 col-md-8 col-sm-12">
                                <h2>Realtime Monitoring</h2>
                                <ul class="breadcrumb p-l-0 p-b-0 ">
                                    <li class="breadcrumb-item active">Select IOT device ID to begin monitoring</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row clearfix">
            <div class="col-lg-3 col-md-12 col-sm-12">
                <div class="card">
                    <div class="body" id="buttonContainer">
                        <h6>Device Broadcast ID</h6>
                        <input type="text" class="form-control" id="LegioGuardIDText" value="" />
                        <br />
                        <button class="btn btn-warning" id="myButton" onclick="SimulateSwitch()">Monitoring Switch: Off </button>
                        <br />
                        <h6>Monitoring Status:</h6>
                        <h7 id="Status">Not Connected</h7>
                        <br />
                        <br />
                        <h6>Last data recieved at: </h6>
                        <input type="text" style="border:none" class="form-control" id="LastBroadcastTime" value="" />
                        <br />
                        <br />
                        <h6>Response from API server: </h6>
                        <h7 id="APIResponse">No Response</h7>
                        <br />
                        <br />
                    </div>
                </div>
            </div>

            <div class="col-lg-9 col-md-12">
                <div class="card">
                    <div class="header">
                        <h2><strong>Realtime Chart</strong></h2>
                        <ul class="header-dropdown">
                            <li class="dropdown">
                                <a href="javascript:void(0);" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"> <i class="zmdi zmdi-more"></i> </a>
                                <ul class="dropdown-menu dropdown-menu-right">
                                    <li><a href="javascript:void(0);">Action</a></li>
                                    <li><a href="javascript:void(0);">Another action</a></li>
                                    <li><a href="javascript:void(0);">Something else</a></li>
                                </ul>
                            </li>
                            <li class="remove">
                                <a role="button" class="boxs-close"><i class="zmdi zmdi-close"></i></a>
                            </li>
                        </ul>
                    </div>
                    <div class="body">
                        <iframe class="chartjs-hidden-iframe" style="width: 100%; display: block; border: 0px; height: 0px; margin: 0px; position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px;"></iframe>
                        <canvas id="line_chart" height="300" width="600" style="display: block; width: 480px; height: 240px;"></canvas>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>
</section>
