<section class="content">
    <div class="container">
        <div class="row clearfix">
            <div class="col-lg-12">
                <div class="card">
                    <div class="body block-header">
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12">
                                <h2>Real Time IoT Device Monitor</h2>
                                <ul class="breadcrumb p-l-0 p-b-0" id="responsebody">
                                    <li class="breadcrumb-item active">Select an IoT device to monitor incoming data in real time</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
            <div class="col-lg-12 col-md-12 col-sm-12">
                    <div class="card">
<!--                         <div class="header" id="rheader">
                            <h2><strong>Loading chart...</strong></h2>

                            </div>
                        </div> -->
                        <div class="body">
                                <div class="dropdown">
                                        <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                          Select Device
                                          <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenu1" id="deviceSelectMenu">
                                        </ul>
                        </div>
                    </div>
                    </div>
                    <div class="card">
                            <div class="body" id="phaserdiv">
                            </div>
                    </div>
        </div>
    </div>

</section>





<script src="//cdn.jsdelivr.net/npm/phaser@3.17.0/dist/phaser.js"></script>
<!-- <script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser-arcade-physics.min.js"></script>
<script type="text/javascript" src="assets/ScaleManager.js"></script>
<script src="https://github.com/photonstorm/phaser/tree/v3.17.0/src/scale/index.js"></script> -->

<script>

var chosenDevice;
var chosenDeviceName;

LoadDeviceSelectBox();
function LoadDeviceSelectBox(){
        var dropboxURL = masterURL + "/jwalstab/lookup_devices/";
        $.ajax({type: "GET", url: dropboxURL, contentType: "application/json; charset=utf-8", crossDomain: true,  dataType: "json",
            success: function (data, status, jqXHR) {
                //creates the links in the dropdown menu and populates device list
                deviceList = [];
                data.forEach(element => {
                    var newlink = $('<li><a href="#" data-value="action">' + element.devicename + '</a></li>');
                    $('#deviceSelectMenu').append(newlink);
                    deviceList.push(element);
                });

                //adds code to change when device selected
                $("#deviceSelectMenu li a").click(function(){
                    $(this).parents(".dropdown").find('.btn').html($(this).text() + ' <span class="caret"></span>');
                    $(this).parents(".dropdown").find('.btn').val($(this).data('value'));
                    var selectedvaluefromdropdownbox = $(this).parents(".dropdown").find('.btn').val($(this).data('value'));
                    deviceList.forEach(element => {
                        if (element.devicename == selectedvaluefromdropdownbox[0].innerText)
                        {
                            chosenDevice = element.deviceID;
                            chosenDeviceName = element.devicename;
                        }
                    });
                    console.log(chosenDevice);
                    deviceChanged = true;
                    });
            },
            error: function (jqXHR, status) {
                console.log("ERROR");
            }
        });
    }    

setTimeout(DiagramDataGrab,3000);

var diagramStatusText = "Please select an IoT device to begin monitoring"
var diagramTimeText;
var Cold_Tank_Temp1 = 0;
var Cold_Tank_Temp2 = 0;
var Cold_Tank_Temp3 = 0;
var Hot_Tank_temp1 = 0;
var Hot_Tank_temp2 = 0;
var Hot_Tank_temp3 = 0;
var Cold_Return_Temp = 0;
var Cold_Supply_Temp = 0;
var Suct_Temp = 0;
var Disc_temp = 0;
var Evap_Inlet_Temp = 0;
var Hot_Return_Temp = 0;
var Hot_Supply_Temp = 0;
var fanOn;
var Hot_Fan = false;

function DiagramDataGrab(){
    console.log("fired!");
    if (chosenDevice != null){
        var diagramDataURL = masterURL + "/" + chosenDevice + "/last/1";
        $.ajax({
        type: "GET", url: diagramDataURL,contentType: "application/json; charset=utf-8",crossDomain: true,dataType: "json",
            success: function (data, status, jqXHR) {
                diagramStatusText = "Connected"
                diagramDeviceTitle = "You are now connected to " + chosenDeviceName;
                console.log(diagramDeviceTitle);
                var timestamp = data[0]._id.toString().substring(0,8);
                var idTime = new Date( parseInt( timestamp, 16 ) * 1000 )
                diagramTimeText = new Date(idTime).toLocaleString();
                Cold_Tank_Temp1 = data[0].Cold_Tank_Temp1;
                Cold_Tank_Temp2 = data[0].Cold_Tank_Temp2;
                Cold_Tank_Temp3 = data[0].Cold_Tank_Temp3;
                Hot_Tank_temp1 = data[0].Hot_Tank_Temp1;
                Hot_Tank_temp2 = data[0].Hot_Tank_Temp2;
                Hot_Tank_temp3 = data[0].Hot_Tank_Temp3;
                Cold_Tank_Temp3 = data[0].Cold_Tank_Temp3;
                Cold_Return_Temp = data[0].Cold_Return_Temp;
                Cold_Supply_Temp = data[0].Cold_Supply_Temp;
                Suct_Temp = data[0].Suct_Temp;
                Disc_temp = data[0].DiscTemp;
                Evap_Inlet_Temp = data[0].Evap_Inlet_Temp;
                Hot_Return_Temp = data[0].Hot_Return_Temp;
                Hot_Supply_Temp = data[0].Hot_Supply_Temp;
                Hot_Fan = data[0].Hot_Fan;
                console.log(Hot_Fan);
                ManageFan();
            },
            error: function (jqXHR, status) {
                diagramStatusText = jqXHR;
                console.log("jqXHYR:" + jqXHR + "status:" + status)
            }
        });
    }
    else{
        console.log("!");
    }
    setTimeout(DiagramDataGrab,3000);

}

function ManageFan(){
    if (Hot_Fan == true){
                fanImageOff.setVisible(false);
                fanImageOn.setVisible(true);
                //whiteboxtext[0].setVisible(true);
            }
            else if (Hot_Fan == false){
                fanImageOn.setVisible(false);
                fanImageOff.setVisible(true);
                //whiteboxtext[0].setVisible(false);
            }

}
</script>


<script>

    
        function preload ()
        {
            this.load.image('background', 'phaser/MainCanvas.png');
            this.load.image('fansmallon', 'phaser/fansmallon.png');
            this.load.image('fansmalloff', 'phaser/fansmalloff.png');
        }
    
        var coldTankText;
        var titleText;
        var coldReturnTempText;
        var coldSupplyTempText;
        var Suct_Temp_Text;
        var Disc_temp_Text;
        var Evap_Inlet_Temp_Text;
        var Hot_Return_Temp_Text;
        var Hot_Supply_Temp_Text;

        var num = 1;
        
        var fanImageOn;
        var fanImageOff;

        var MonitoringDiagramScreen = new Phaser.Class({

        Extends: Phaser.Scene,

        initialize:

        function MonitoringDiagramScreen ()
        {
            Phaser.Scene.call(this, { key: 'MonitoringDiagramScreen' });
        },

        preload: function ()
        {
            this.load.image('background', 'phaser/MainCanvas.png');
            this.load.image('fansmallon', 'phaser/fansmallon.png');
            this.load.image('fansmalloff', 'phaser/fansmalloff.png');
        },

        create: function ()
        {
            this.add.image(600, 300, 'background');
                fanImageOn = this.add.image(810, 300, 'fansmallon');
                fanImageOff = this.add.image(810, 300, 'fansmalloff');

                this.add.text(400, 30, "Connection Status: ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });
                this.add.text(400, 60, "Monitoring IoT Device: ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });
                this.add.text(400, 90, "Last Data Recieved at: ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });

                
                titleText = [
                this.add.text(600, 30, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' }),
                this.add.text(600, 60, ' ', { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' }),
                this.add.text(600, 90, ' ', { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' })
                ];


                titleText[0].setInteractive();
                titleText[0].on('pointerdown', () => { 
                    this.scene.start("SystemControl");
                    console.log("pressed!");
                });

                coldTankText = [
                    this.add.text(40, 350, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00008B' }),
                    this.add.text(40, 275, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00008B' }),
                    this.add.text(40, 210, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00008B' }) 
                ];

                hotTankText = [
                    this.add.text(900, 350, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00008B' }),
                    this.add.text(900, 275, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00008B' }),
                    this.add.text(900, 210, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00008B' }) 
                ];
                
                fanImageOn.setVisible(false);
                fanImageOff.setVisible(true);
                this.add.text(175, 160, "Cold Return Temp", { fontFamily: 'Arial', fontSize: 10, color: '#00ff00' });
                coldReturnTempText = this.add.text(175, 175, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });

                this.add.text(110, 400, "Cold Supply Temp", { fontFamily: 'Arial', fontSize: 10, color: '#00ff00' });
                coldSupplyTempText = this.add.text(110, 415, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });
                
                this.add.text(405, 160, "Suction Temp", { fontFamily: 'Arial', fontSize: 10, color: '#00ff00' });
                Suct_Temp_Text = this.add.text(405 , 175, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });

                this.add.text(405, 410, "Evap Inlet Temp", { fontFamily: 'Arial', fontSize: 10, color: '#00ff00' });
                Evap_Inlet_Temp_Text = this.add.text(405 , 425, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });

                this.add.text(660, 200, "Exhaust Temp", { fontFamily: 'Arial', fontSize: 10, color: '#00ff00' });
                Disc_temp_Text = this.add.text(660 , 215, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });

                this.add.text(770, 390, "Hot Return Temp", { fontFamily: 'Arial', fontSize: 10, color: '#00ff00' });
                Hot_Return_Temp_Text = this.add.text(770 , 405, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });

                this.add.text(840, 115, "Hot Supply Temp", { fontFamily: 'Arial', fontSize: 10, color: '#00ff00' });
                Hot_Supply_Temp_Text = this.add.text(840 , 130, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });

                this.add.text(840, 115, "Hot Supply Temp", { fontFamily: 'Arial', fontSize: 10, color: '#00ff00' });
                Hot_Supply_Temp_Text = this.add.text(840 , 130, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });

                this.add.text(840, 115, "Hot Fan", { fontFamily: 'Arial', fontSize: 10, color: '#00ff00' });
                Hot_Supply_Temp_Text = this.add.text(840 , 130, " ", { fontFamily: 'Arial', fontSize: 16, color: '#00ff00' });
        },

        update: function (time, delta)
        {
            if (Hot_Fan == true){
                fanImageOn.angle+=15;
            }


            titleText[0].setText(diagramStatusText);
            titleText[1].setText(chosenDeviceName);
            titleText[2].setText(diagramTimeText);
            coldTankText[0].setText("T1: " + Cold_Tank_Temp1 + "°C");
            coldTankText[1].setText("T2: " + Cold_Tank_Temp2 + "°C");
            coldTankText[2].setText("T3: " + Cold_Tank_Temp3 + "°C");
            hotTankText[0].setText("T1: " + Hot_Tank_temp1 + "°C");
            hotTankText[1].setText("T2: " + Hot_Tank_temp2 + "°C");
            hotTankText[2].setText("T3: " + Hot_Tank_temp3 + "°C");
            coldReturnTempText.setText(Cold_Return_Temp + "°C");
            coldSupplyTempText.setText(Cold_Supply_Temp + "°C");
            Suct_Temp_Text.setText(Suct_Temp + "°C");
            Disc_temp_Text.setText(Disc_temp + "°C");
            Evap_Inlet_Temp_Text.setText(Evap_Inlet_Temp + "°C");
            Hot_Return_Temp_Text.setText(Hot_Return_Temp + "°C");
            Hot_Supply_Temp_Text.setText(Hot_Supply_Temp + "°C");
        }

        });

        var SystemControl = new Phaser.Class({

        Extends: Phaser.Scene,

        initialize:

        function SystemControl ()
        {
            Phaser.Scene.call(this, { key: 'SystemControl' });
        },

        preload: function ()
        {
            this.load.image('scbackground', 'phaser/systemcontrol.png');
        },

        create: function ()
        {
            this.add.image(600, 300, 'scbackground');
        },

        update: function (){

        }
        });

        
        var config = {
            type: Phaser.AUTO,
            scale: {
                parent: 'phaserdiv',
                mode: Phaser.Scale.FIT,
                autoCenter: Phaser.Scale.CENTER_BOTH,
                width: 1200,
                height: 600
            },

            physics: {
                default: 'arcade',
            },
            scene: [MonitoringDiagramScreen,SystemControl]
        };
        var game = new Phaser.Game(config);
</script>