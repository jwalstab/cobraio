<section class="content">
    <div class="container">
        <div class="row clearfix">
            <div class="col-lg-12">
                <div class="card">
                    <div class="body block-header">
                        <div class="row">
<!--                             <div class="col-lg-12 col-md-12 col-sm-12">
                                <h2>Real Time IoT Device Monitor</h2>
                                <ul class="breadcrumb p-l-0 p-b-0" id="responsebody">
                                    <li class="breadcrumb-item active" id="phaserdiv" >Select an IoT device to monitor incoming data in real time</li>
                                </ul>
                            </div> -->
                            <div class="col-lg-12 col-md-12 col-sm-12" id="phaserdiv">
                                    <h2>Real Time IoT Device Monitor</h2>
                                    <ul class="breadcrumb p-l-0 p-b-0" id="responsebody">
                                        <li class="breadcrumb-item active" >Select an IoT device to monitor incoming data in real time</li>
                                    </ul>
                                </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
<!--             <div class="col-lg-12 col-md-12 col-sm-12">
                    <div class="card">
                         <div class="header" id="rheader">
                            <h2><strong>Loading chart...</strong></h2>

                            </div>
                        </div>
                        <div class="body">
                                <div class="dropdown">
                                        <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                          Select Device
                                          <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenu1" id="deviceSelectMenu">
                                        </ul>
                                </div>
                    </div>
                </div> -->
<!--                         <div class="card" >
                            <div class ="header" >

                            </div>
                                 <div class="body" >
                                </div>
                        </div> -->
            </div>
<!--             <div class="col-lg-9 col-md-9 col-sm-9">
                <div id="phaserdiv" width="1200" height="600">
                </div>

            </div> -->

    </div>
</section>




<script src="assets/js/phaser.min.js"></script>
<!-- <script src="//cdn.jsdelivr.net/npm/phaser@3.17.0/dist/phaser.js"></script> -->
<!-- <script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser-arcade-physics.min.js"></script>
<script type="text/javascript" src="assets/ScaleManager.js"></script>
<script src="https://github.com/photonstorm/phaser/tree/v3.17.0/src/scale/index.js"></script> -->

<script>

var chosenDevice;
var chosenDeviceName;
deviceList = [];

LoadDeviceSelectBox();
function LoadDeviceSelectBox(){
        var dropboxURL = masterURL + "/<%= loggedInPool %>/lookup_devices_time/";
        console.log(dropboxURL);
        $.ajax({type: "GET", url: dropboxURL, contentType: "application/json; charset=utf-8", crossDomain: true,  dataType: "json",
            success: function (data, status, jqXHR) {
                //creates the links in the dropdown menu and populates device list
                deviceList = [];
                data.forEach(element => {
                    deviceList.push(element);
                });
                deviceList.sort(function(a,b){
                return a.deviceName.localeCompare(b.deviceName);
                }) //SORTS LIST ALPHABETICALLY
                deviceList.forEach(element => {
                    console.log(element);
                })
            },
            error: function (jqXHR, status) {
                console.log("ERROR");
            }
        });
    }    

setTimeout(DiagramDataGrab,3000);

var diagramStatusText = "Please select an IoT device to begin monitoring"
var diagramTimeText;
var gotData; // checks if no data on the diagram grab and changes text for it in the update function of main diagaram

var fanOn;

var idTime;

var lastTime;

function DiagramDataGrab(){
    /* game.scale.startFullscreen(); */
    console.log("diagramdatagrab!");
    if (chosenDevice != null){
        var diagramDataURL = masterURL + "/" + chosenDevice + "/last/1";
        $.ajax({
        type: "GET", url: diagramDataURL,contentType: "application/json; charset=utf-8",crossDomain: true,dataType: "json",
            success: function (data, status, jqXHR) {
                if (data[0] != undefined){
                    gotData = true;
                    diagramStatusText = "Connected"
                    diagramDeviceTitle = "You are now connected to " + chosenDeviceName;
                    var timestamp = data[0]._id.toString().substring(0,8);
                    if (lastTime != timestamp){
                        recieving = true;
                        lastTime = timestamp;
                    }
                    idTime = new Date( parseInt( timestamp, 16 ) * 1000 )
                    diagramTimeText = new Date(idTime).toLocaleString();
                    Cold_Tank_Temp1 = data[0].Cold_Tank_Temp1;
                    Cold_Tank_Temp2 = data[0].Cold_Tank_Temp2;
                    Cold_Tank_Temp3 = data[0].Cold_Tank_Temp3;
                    Hot_Tank_Temp1 = data[0].Hot_Tank_Temp1;
                    Hot_Tank_Temp2 = data[0].Hot_Tank_Temp2;
                    Hot_Tank_Temp3 = data[0].Hot_Tank_Temp3;
                    Cold_Tank_Temp3 = data[0].Cold_Tank_Temp3;
                    Cold_Return_Temp = data[0].Cold_Return_Temp;
                    Cold_Supply_Temp = data[0].Cold_Supply_Temp;
                    Suct_Temp = data[0].Suct_Temp;
                    Disc_temp = data[0].Disc_Temp;
                    Evap_Inlet_Temp = data[0].Evap_Inlet_Temp;
                    Hot_Return_Temp = data[0].Hot_Return_Temp;
                    Hot_Supply_Temp = data[0].Hot_Supply_Temp;
                    Hot_Fan = data[0].Hot_Fan;
                    Disc_Temp = data[0].Disc_Temp;
                    Cond_Outlet_Temp = data[0].Cond_Outlet_Temp;
                    Ele_Boost_Temp = data[0].Ele_Boost_Temp;
                    Injection_Vlv = data[0].Injection_Vlv;

                    //pumps
                    Flow_Switch_ColdFS_Char = data[0].Flow_Switch_ColdFS_Char;
                    Flow_Switch_ColdFS2_Char = data[0].Flow_Switch_ColdFS2_Char;
                    Flow_Switch_HotFS1_Char = data[0].Flow_Switch_HotFS1_Char;
                    Flow_Switch_HotFS2_Char = data[0].Flow_Switch_HotFS2_Char;
                    CP_Yout2_Act = data[0].CP_Yout2_Act;
                    HP_Yout1_Act = data[0].HP_Yout1_Act;
                    EVD_Emb_1_Params_EVDEMB_1_EVD_Variables_EEV_PosPercent_Val = data[0].EVD_Emb_1_Params_EVDEMB_1_EVD_Variables_EEV_PosPercent_Val;

                    //pump specific page
                    PVlv_Mng_ColdVlv_Setp = data[0].PVlv_Mng_ColdVlv_Setp;
                    PVlv_Mng_Cold_Min_Op = data[0].PVlv_Mng_Cold_Min_Op;
                    PVlv_Mng_Cold_Max_Op = data[0].PVlv_Mng_Cold_Max_Op;
                    PVlv_Mng_Cold_Op_ProAl = data[0].PVlv_Mng_Cold_Op_ProAl;
                    PVlv_Mng_ColdVlv_DeadBand = data[0].PVlv_Mng_ColdVlv_DeadBand;
                    PVlv_Mng_ColdVlv_Kp = data[0].PVlv_Mng_ColdVlv_Kp;
                    PVlv_Mng_ColdVlv_Ti = data[0].PVlv_Mng_ColdVlv_Ti;
                    PVlv_Mng_ColdVlv_Td = data[0].PVlv_Mng_ColdVlv_Td;

                    PVlv_Mng_HotVlv_Setp = data[0].PVlv_Mng_HotVlv_Setp;
                    PVlv_Mng_Hot_Min_Op = data[0].PVlv_Mng_Hot_Min_Op;
                    PVlv_Mng_Hot_Max_Op = data[0].PVlv_Mng_Hot_Max_Op;
                    PVlv_Mng_Hot_Op_ProAl = data[0].PVlv_Mng_Hot_Op_ProAl;
                    PVlv_Mng_HotVlv_DeadBand = data[0].PVlv_Mng_HotVlv_DeadBand;
                    PVlv_Mng_HotVlv_Kp = data[0].PVlv_Mng_HotVlv_Kp;
                    PVlv_Mng_HotVlv_Ti = data[0].PVlv_Mng_HotVlv_Ti;
                    PVlv_Mng_HotVlv_Td = data[0].PVlv_Mng_HotVlv_Td;


                    High_Pressure = data[0].High_Pressure;
                    Low_Pressure = data[0].Low_Pressure;


                    Master_Ctrl_Mng_Comp_Setp = data[0].Master_Ctrl_Mng_Comp_Setp;
                    Master_Ctrl_Mng_Comp_Diff = data[0].Master_Ctrl_Mng_Comp_Diff;
                    Master_Ctrl_Mng_Comp_MinOff_T = data[0].Master_Ctrl_Mng_Comp_MinOff_T;
                    Master_Ctrl_Mng_Comp_MinOn_T = data[0].Master_Ctrl_Mng_Comp_MinOn_T;
                    Master_Ctrl_Mng_Comp_Start_Delay = data[0].Master_Ctrl_Mng_Comp_Start_Delay;
                    
                    Master_Ctrl_Mng_InjecVlv_Setp = data[0].Master_Ctrl_Mng_InjecVlv_Setp;
                    Master_Ctrl_Mng_InjecVlv_Offset = data[0].Master_Ctrl_Mng_InjecVlv_Offset;
                    Master_Ctrl_Mng_Injec_MaxTime = data[0].Master_Ctrl_Mng_Injec_MaxTime;
                    Master_Ctrl_Mng_Injec_ReStart_Delay = data[0].Master_Ctrl_Mng_Injec_ReStart_Delay;


                    Flush_Valve_Flush_Week_Set = data[0].Flush_Valve_Flush_Week_Set;
                    Flush_Valve_Flush_Hour_Set = data[0].Flush_Valve_Flush_Hour_Set;
                    Flush_Valve_Flush_Minute_Set = data[0].Flush_Valve_Flush_Minute_Set;
                    Flush_Valve_Flush_Time = data[0].Flush_Valve_Flush_Time;

                    //fan stuff
                    Master_Ctrl_Mng_Fan_Diff = data[0].Master_Ctrl_Mng_Fan_Diff;
                    Master_Ctrl_Mng_Fan_Setp = data[0].Master_Ctrl_Mng_Fan_Setp;
                    Master_Ctrl_Mng_Fan_HRT_Diff = data[0].Master_Ctrl_Mng_Fan_HRT_Diff;
                    Master_Ctrl_Mng_Fan_CRT_Diff = data[0].Master_Ctrl_Mng_Fan_CRT_Diff;
                    EleHeater_Mng_EleH_Setp = data[0].EleHeater_Mng_EleH_Setp;
                    EleHeater_Mng_EBT_Ele_Setp = data[0].EleHeater_Mng_EBT_Ele_Setp;
                    EleHeater_Mng_EleH_Offset = data[0].EleHeater_Mng_EleH_Offset;

                }
                else{
                    gotData = false;
                }
            },
            error: function (jqXHR, status) {
                diagramStatusText = jqXHR;
                console.log("jqXHYR:" + jqXHR + "status:" + status)
            }
        });
    }
    else{
        console.log("!");
    }
    setTimeout(DiagramDataGrab,3000);
    setTimeout(TurnOffRecieving,1000);
}
</script>


<script>
function TurnOffRecieving(){
    recieving = false;
}
var recieving;
var titleText;
var statusText;
var connectionText;

//MASTER VARIABLES
var PLC_Value_Name;
var PLC_Value_Bool_Value;

//LIVE MONITOR VARIABLES
var arrowsCounter;
var arrowsVisible;
var fanImageOn;
var fanImageOff;

//Compressor Control Variables
var userAccessLevel = 1;
var num = 1;


//choose device menu
var cdmButtons = [];
var cdmStatusText = [];
var cdmDeviceNames = [];
var cdmStatusData = [];
var cdmRedLights = [];
var cdmGreenLights = [];
var cdmCounter = 0;
var pagenumber = 1;

var ChooseDeviceMenu = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function ChooseDeviceMenu ()
    {
        Phaser.Scene.call(this, { key: 'ChooseDeviceMenu' });
    },

    preload: function ()
    {
        this.load.image('choosedevicebackground', 'phaser/blankbackground.png');
        this.load.image('longbutton', 'phaser/longbutton.png');
        this.load.image('greenlight', 'phaser/cdmlightgreen.png');
        this.load.image('redlight', 'phaser/cdmlightred.png');
    },

    create: function ()
    {
        
        this.add.image(600, 300, 'choosedevicebackground');
        
        deviceNameTitle = this.add.text(80, 20, "Select IoT Device to Monitor", { fontFamily: 'Arial', fontSize: 36, color: '#ffffff' })
        
        //loads buttons then hides them
        cdmButtons = [
            this.add.image(600, 160, 'longbutton'), 
            this.add.image(600, 210, 'longbutton'),
            this.add.image(600, 260, 'longbutton'),
            this.add.image(600, 310, 'longbutton'),
            this.add.image(600, 360, 'longbutton'),
            this.add.image(600, 410, 'longbutton'),
            this.add.image(600, 460, 'longbutton'),
            this.add.image(600, 510, 'longbutton'),
            ];
        cdmButtons.forEach(element => {
            element.setVisible(false);
        });

        //loads device name labels into array then hides them
        cdmDeviceNames = [
        this.add.text(80, 150, "Device 0", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(80, 200, "Device 1", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(80, 250, "Device 2", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(80, 300, "Device 3", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(80, 350, "Device 4", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(80, 400, "Device 5", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(80, 450, "Device 6", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(80, 500, "Device 7", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        ]
        cdmDeviceNames.forEach(element => {
            element.setVisible(false);
        });

        //loads device status texts into array then hidesthem
        cdmStatusText = [
        this.add.text(1020, 150, " ", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(1020, 200, " ", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(1020, 250, " ", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(1020, 300, " ", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(1020, 350, " ", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(1020, 400, " ", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(1020, 450, " ", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' }),
        this.add.text(1020, 500, " ", { fontFamily: 'Arial', fontSize: 22, color: '#ffffff' })
        ]
        cdmStatusText.forEach(element => {
            element.setVisible(false);
        });

        //loads red and green lights and hides them
        cdmRedLights = [
        this.add.image(1110, 160, 'redlight'),
        this.add.image(1110, 210, 'redlight'),
        this.add.image(1110, 260, 'redlight'),
        this.add.image(1110, 310, 'redlight'),
        this.add.image(1110, 360, 'redlight'),
        this.add.image(1110, 410, 'redlight'),
        this.add.image(1110, 460, 'redlight'),
        this.add.image(1110, 510, 'redlight')
        ];
        cdmRedLights.forEach(element => {
            element.setVisible(false);
        });
        cdmGreenLights = [
        this.add.image(1110, 160, 'greenlight'),
        this.add.image(1110, 210, 'greenlight'),
        this.add.image(1110, 260, 'greenlight'),
        this.add.image(1110, 310, 'greenlight'),
        this.add.image(1110, 360, 'greenlight'),
        this.add.image(1110, 410, 'greenlight'),
        this.add.image(1110, 460, 'greenlight'),
        this.add.image(1110, 510, 'greenlight')
        ];
        cdmGreenLights.forEach(element => {
            element.setVisible(false);
        });

        //DeviceMenuUpdate(this);
    },

    update: function (){

        cdmCounter++;
        if (cdmCounter > 100){
            cdmCounter = 0;
            fired = true;
            LoadDeviceSelectBox();
            DeviceMenuUpdate(this);
            if (cdmMenuFirstLoad = true){
                cdmMenuFirstLoad = false;
                SetupButtons(this);
            }
            
        }
    }
    });

var cdmMenuFirstLoad = false;

function DeviceMenuUpdate(sceneObj){
    for (let j = 1 * pagenumber; j < 9; j++) {
            var i = j - 1;
            if (deviceList[i] != null){
                cdmButtons[i].setVisible(true);
                cdmStatusText[i].setText(deviceList[i].deviceStatus);
                cdmStatusText[i].setVisible(true);
                cdmDeviceNames[i].setText(deviceList[i].deviceName);
                cdmDeviceNames[i].setVisible(true);
                cdmRedLights[i].setVisible(true);
                if (deviceList[i].deviceStatus == "Online"){
                    cdmGreenLights[i].setVisible(true);
                }
                else{
                    cdmGreenLights[i].setVisible(false);
                }
            }
            else{
                cdmButtons[i].setVisible(false);
                cdmStatusText[i].setVisible(false);
                cdmDeviceNames[i].setVisible(false);
                cdmRedLights[i].setVisible(false);
            }
        }
}


function SetupButtons(sceneObj){
    cdmButtons[0].setInteractive();
    cdmButtons[0].on('pointerdown', () => {
        sceneObj.scene.start("MonitoringDiagramScreen");
        chosenDevice = deviceList[0].deviceID;
        chosenDeviceName = deviceList[0].deviceName;
    });
    cdmButtons[1].setInteractive();
    cdmButtons[1].on('pointerdown', () => {
        sceneObj.scene.start("MonitoringDiagramScreen");
        chosenDevice = deviceList[1].deviceID;
        chosenDeviceName = deviceList[1].deviceName;
    });
    cdmButtons[2].setInteractive();
    cdmButtons[2].on('pointerdown', () => {
        sceneObj.scene.start("MonitoringDiagramScreen");
        chosenDevice = deviceList[2].deviceID;
        chosenDeviceName = deviceList[2].deviceName;
    });
    cdmButtons[3].setInteractive();
    cdmButtons[3].on('pointerdown', () => {
        sceneObj.scene.start("MonitoringDiagramScreen");
        chosenDevice = deviceList[3].deviceID;
        chosenDeviceName = deviceList[3].deviceName;
    });
    cdmButtons[4].setInteractive();
    cdmButtons[4].on('pointerdown', () => {
        sceneObj.scene.start("MonitoringDiagramScreen");
        chosenDevice = deviceList[4].deviceID;
        chosenDeviceName = deviceList[4].deviceName;
    });
    cdmButtons[5].setInteractive();
    cdmButtons[5].on('pointerdown', () => {
        sceneObj.scene.start("MonitoringDiagramScreen");
        chosenDevice = deviceList[5].deviceID;
        chosenDeviceName = deviceList[5].deviceName;
    });
    cdmButtons[6].setInteractive();
    cdmButtons[6].on('pointerdown', () => {
        sceneObj.scene.start("MonitoringDiagramScreen");
        chosenDevice = deviceList[6].deviceID;
        chosenDeviceName = deviceList[6].deviceName;
    });
    cdmButtons[7].setInteractive();
    cdmButtons[7].on('pointerdown', () => {
        sceneObj.scene.start("MonitoringDiagramScreen");
        chosenDevice = deviceList[7].deviceID;
        chosenDeviceName = deviceList[7].deviceName;
    });
    cdmButtons[7].setInteractive();
    cdmButtons[7].on('pointerdown', () => {
        sceneObj.scene.start("MonitoringDiagramScreen");
        chosenDevice = deviceList[7].deviceID;
        chosenDeviceName = deviceList[7].deviceName;
    });
}
/* function LoadDeviceTimes(){
            deviceList.forEach(element => {
                var lastContactedURL = masterURL + "/" + element.deviceID + "/last/1";
                $.ajax({type: "GET", url: lastContactedURL, contentType: "application/json; charset=utf-8", crossDomain: true,  dataType: "json",
                success: function (data, status, jqXHR) {
                    if (data[0] != null)
                    {
                        var timestamp = data[0]._id.toString().substring(0,8);
                        var idTime = new Date( parseInt( timestamp, 16 ) * 1000 )
                        var clientTime = Date.now();
                        if (clientTime - 60000 < idTime){
                            console.log('online');
                            cdmStatusData.push
                        }
                        else{
                            console.log('offline');
                        }
                    }
                    else{
                        console.log('offline');
                    }
                },
                error: function (jqXHR, status) {
                    console.log("ERROR");
                }
            });
    });
};
 */
var MonitoringDiagramScreen = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function MonitoringDiagramScreen ()
    {
        Phaser.Scene.call(this, { key: 'MonitoringDiagramScreen' });
    },

    preload: function ()
    {
        
        this.load.image('background', 'phaser/MainCanvas.png');
        this.load.image('fansmallon', 'phaser/fansmallon.png');
        this.load.image('lcdfan', 'phaser/lcdfan.png');
        this.load.image('fansmalloff', 'phaser/fansmalloff.png');
        this.load.image('greenstatus', 'phaser/greenstatus.png')
        this.load.image('bluestatus', 'phaser/bluestatus.png')
        this.load.image('arrows', 'phaser/arrows.png')
        this.load.image('greenvalve', 'phaser/greenvalve.png')

        this.load.image('buttonmask', 'phaser/buttonmask.png')
    },

    create: function ()
    {       
            
            LoadMenuButtons(this);
            this.add.image(600, 300, 'background');
            arrows = this.add.image(600, 300, 'arrows');
            arrows.setVisible(false);
            lcdFan = this.add.image(997, 301, 'lcdfan'); 
            greenStatusLight = this.add.image(100, 41, 'greenstatus');
            blueStatusLight = this.add.image(100, 41, 'bluestatus');
            eevValveLight = this.add.image(607, 367, 'greenvalve'); 
            injValveLight = this.add.image(497, 273, 'greenvalve'); 
            //this.add.image(690, 375, 'greenvalve');

            eevValveLight.setVisible(false);
            injValveLight.setVisible(false);
            greenStatusLight.setVisible(false);
            blueStatusLight.setVisible(false);

            connectionText = this.add.text(130, 30, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' })
            statusText = this.add.text(100, 50, "", { fontFamily: 'System', fontSize: 18, color: '#ffffff' })

            Cold_Tank_Temp1_Text = this.add.text(55, 340, " ", { fontFamily: 'Arial', fontSize: 16, color: '#ffffff' })
            Cold_Tank_Temp2_Text = this.add.text(55, 300, " ", { fontFamily: 'Arial', fontSize: 16, color: '#ffffff' })
            Cold_Tank_Temp3_Text = this.add.text(55, 260, " ", { fontFamily: 'Arial', fontSize: 16, color: '#ffffff' })

            Hot_Tank_Temp1_Text = this.add.text(1075, 340, " ", { fontFamily: 'Arial', fontSize: 16, color: '#ffffff' })
            Hot_Tank_Temp2_Text = this.add.text(1075, 300, " ", { fontFamily: 'Arial', fontSize: 16, color: '#ffffff' })
            Hot_Tank_Temp3_Text = this.add.text(1075, 260, " ", { fontFamily: 'Arial', fontSize: 16, color: '#ffffff' }) 
            

            Cold_Return_Temp_Text = this.add.text(130, 170, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Cold_Supply_Temp_Text = this.add.text(210, 411, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Suct_Temp_Text = this.add.text(445 , 170, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Evap_Inlet_Temp_Text = this.add.text(443 , 411, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Disc_Temp_Text = this.add.text(645 , 169, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Hot_Return_Temp_Text = this.add.text(1016 , 402, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Ele_Boost_Temp_Text = this.add.text(1016 , 420, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Hot_Supply_Temp_Text = this.add.text(876 , 171, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Cond_Outlet_Temp_Text = this.add.text(660 , 410, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });

            //pumps
            Flow_Switch_ColdFS_Char_Text = this.add.text(320 , 160, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Flow_Switch_ColdFS2_Char_Text = this.add.text(320 , 180, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            CP_Yout2_Act_Text = this.add.text(320 , 198, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Flow_Switch_HotFS1_Char_Text = this.add.text(780 , 383, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            Flow_Switch_HotFS2_Char_Text = this.add.text(780 , 403, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            HP_Yout1_Act_Text = this.add.text(780 , 420, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });

            //eev
            EVD_Emb_1_Params_EVDEMB_1_EVD_Variables_EEV_PosPercent_Val_Text = this.add.text(550 , 380, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });


            Injection_Vlv_Text = this.add.text(445 , 280, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });

            EvapBypassValvePlaceHolderText = this.add.text(314 , 254, "Closed", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
            CondBypassValvePlaceHolderText = this.add.text(765 , 324, "Closed", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });

            //fan
            Hot_Fan_Text = this.add.text(895 , 302, " ", { fontFamily: 'Arial', fontSize: 12, color: '#ffffff' });
    },

    update: function (time, delta)
    {
        //lcdFan.angle+=5;
        if (Hot_Fan == true){
            Hot_Fan_Text.setText("ON");
            lcdFan.angle+=5;
        }
        else{
            Hot_Fan_Text.setText("OFF");
        }
        if (EVD_Emb_1_Params_EVDEMB_1_EVD_Variables_EEV_PosPercent_Val > 0)
        {
            eevValveLight.setVisible(true);
        }
        else
        {
            eevValveLight.setVisible(false);
        }
        if (recieving == true){
            greenStatusLight.setVisible(true);
        }
        else{
            greenStatusLight.setVisible(false);
        }
        if (arrowsCounter < 75){
            arrowsCounter++;
        }
        else{
            arrowsCounter = 0;
            arrowsVisible = !arrowsVisible;
        }

        if (arrowsVisible == true){
            arrows.setVisible(true);
        }
        else{
            arrows.setVisible(false);
        }

        if (chosenDeviceName != null){
            if (gotData == true){
                if (diagramTimeText == null)
                {
                    connectionText.setText("Connecting to device " + chosenDeviceName);
                    blueStatusLight.setVisible(false);
                }
                else{
                    var clientTime = Date.now();
                    if (clientTime - 60000 < idTime){
                        connectionText.setText("Connected to device " + chosenDeviceName + ", last data recieved at: " + diagramTimeText);
                        blueStatusLight.setVisible(true);
                    }
                    else{
                        connectionText.setText("Device " + chosenDeviceName + " is offline, last data recieved at: " + diagramTimeText);
                        blueStatusLight.setVisible(false);
                    }
                }
            }
            else{
                if (diagramTimeText == null){
                    connectionText.setText("Connecting to device " + chosenDeviceName);
                    blueStatusLight.setVisible(false);
                }
                connectionText.setText("No data is available for the device " + chosenDeviceName);
                blueStatusLight.setVisible(false);
            }
        }
        else{
            connectionText.setText("Select a device to start")
        }
        
        Cold_Tank_Temp1_Text.setText("T1: " + Cold_Tank_Temp1 + "°C");
        Cold_Tank_Temp2_Text.setText("T2: " + Cold_Tank_Temp2 + "°C");
        Cold_Tank_Temp3_Text.setText("T3: " + Cold_Tank_Temp3 + "°C");
        Hot_Tank_Temp1_Text.setText("T1: " + Hot_Tank_Temp1 + "°C");
        Hot_Tank_Temp2_Text.setText("T2: " + Hot_Tank_Temp2 + "°C");
        Hot_Tank_Temp3_Text.setText("T3: " + Hot_Tank_Temp3 + "°C");
        Cold_Return_Temp_Text.setText(Cold_Return_Temp + "°C");
        Cold_Supply_Temp_Text.setText(Cold_Supply_Temp + "°C");
        Suct_Temp_Text.setText(Suct_Temp + "°C");
        Disc_Temp_Text.setText(Disc_Temp + "°C");
        Cond_Outlet_Temp_Text.setText(Cond_Outlet_Temp + "°C");
        
        Evap_Inlet_Temp_Text.setText(Evap_Inlet_Temp + "°C");
        Hot_Return_Temp_Text.setText(Hot_Return_Temp + "°C");
        Ele_Boost_Temp_Text.setText(Ele_Boost_Temp + "°C");
        Hot_Supply_Temp_Text.setText(Hot_Supply_Temp + "°C");
        Flow_Switch_ColdFS_Char_Text.setText(Math.round(Flow_Switch_ColdFS_Char) + " L/H");
        Flow_Switch_ColdFS2_Char_Text.setText(Flow_Switch_ColdFS2_Char + " L/H");
        CP_Yout2_Act_Text.setText(CP_Yout2_Act + "%");
        Flow_Switch_HotFS1_Char_Text.setText(Math.round(Flow_Switch_HotFS1_Char) + " L/H");
        Flow_Switch_HotFS2_Char_Text.setText(Math.round(Flow_Switch_HotFS2_Char) + " L/H");
        HP_Yout1_Act_Text.setText(HP_Yout1_Act + "%");

        EVD_Emb_1_Params_EVDEMB_1_EVD_Variables_EEV_PosPercent_Val_Text.setText(EVD_Emb_1_Params_EVDEMB_1_EVD_Variables_EEV_PosPercent_Val + "%");

        if (Injection_Vlv === 0){Injection_Vlv_Text.setText("Closed"); injValveLight.setVisible(false);}
        else{Injection_Vlv_Text.setText("Open"); injValveLight.setVisible(true);}
    }

    });

var SystemControl = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function SystemControl ()
    {
        Phaser.Scene.call(this, { key: 'SystemControl' });
    },

    preload: function ()
    {
        this.load.image('scbackground', 'phaser/systemcontrol.png');
        this.load.image('buttonmask', 'phaser/buttonmask.png')
    },

    create: function ()
    {
        this.add.image(600, 300, 'scbackground');
        LoadMenuButtons(this);
    },

    update: function (){

    }
    });

var CompControl = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function CompControl ()
    {
        Phaser.Scene.call(this, { key: 'CompControl' });
    },

    preload: function ()
    {
        console.log("loading comp");
        this.load.image('ccbackground', 'phaser/compcontrol.png');
        this.load.image('buttonmask', 'phaser/buttonmask.png')
        this.load.image('arrowmask', 'phaser/arrowmask.png')
    },

    create: function ()
    {
        this.add.image(600, 300, 'ccbackground');
        LoadMenuButtons(this);

        //text variable creators
        Comp_On_Text = this.add.text(420 , 155, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Comp_On_Text.setInteractive();
        Comp_On_Text.on('pointerdown', () => {console.log("PRESS!");});

        Injection_Vlv_Text = this.add.text(420 , 185, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Injection_Vlv_Text.setInteractive();
        Injection_Vlv_Text.on('pointerdown', () => {console.log("PRESS!");});

        
        Disc_Temp_Text = this.add.text(270 , 280, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Suct_Temp_Text = this.add.text(270 , 307, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Cold_Return_Temp_Text = this.add.text(270 , 334, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        
        High_Pressure_Text = this.add.text(500 , 280, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Low_Pressure_Text = this.add.text(500 , 307, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });

        
        Master_Ctrl_Mng_Comp_Setp_Text = this.add.text(790 , 155, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Master_Ctrl_Mng_Comp_Diff_Text = this.add.text(1080 , 155, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });

        Master_Ctrl_Mng_Comp_MinOn_T_Text = this.add.text(790 , 182, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Master_Ctrl_Mng_Comp_MinOff_T_Text = this.add.text(1080 , 182, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });

        Master_Ctrl_Mng_Comp_Start_Delay_Text = this.add.text(790 , 212, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });

        Master_Ctrl_Mng_InjecVlv_Setp_Text = this.add.text(800 , 357, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Master_Ctrl_Mng_InjecVlv_Offset_Text = this.add.text(1080 , 357, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Master_Ctrl_Mng_Injec_MaxTime_Text = this.add.text(800 , 388, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        
        Master_Ctrl_Mng_Injec_ReStart_Delay_Text = this.add.text(1080 , 387, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        

/*             var nextArrow = this.add.image(1125,279, 'arrowmask');
        nextArrow.setInteractive();
        nextArrow.on('pointerdown', () => { 
        this.scene.start("SystemControl");
        console.log("pressed!");
        }); */

    },

    update: function (){
        //comp on
        if (Comp_On === 0){Comp_On_Text.setText("OFF");}
        else{Comp_On_Text.setText("ON");}

        //inj valve
        if (Injection_Vlv === 0){Injection_Vlv_Text.setText("OFF");}
        else{Injection_Vlv_Text.setText("ON");}
        
        Suct_Temp_Text.setText(Suct_Temp + "°C");
        Disc_Temp_Text.setText(Disc_Temp + "°C");

        High_Pressure_Text.setText(High_Pressure + " bar");
        Low_Pressure_Text.setText(Low_Pressure + " bar");

        Cold_Return_Temp_Text.setText(Cold_Return_Temp + "°C");
        Master_Ctrl_Mng_Comp_Setp_Text.setText(Master_Ctrl_Mng_Comp_Setp + "°C");
        Master_Ctrl_Mng_Comp_Diff_Text.setText(Master_Ctrl_Mng_Comp_Diff + "°C");

        Master_Ctrl_Mng_Comp_MinOn_T_Text.setText(Master_Ctrl_Mng_Comp_MinOn_T + "s");
        Master_Ctrl_Mng_Comp_MinOff_T_Text.setText(Master_Ctrl_Mng_Comp_MinOff_T + "s");
        Master_Ctrl_Mng_Comp_Start_Delay_Text.setText(Master_Ctrl_Mng_Comp_Start_Delay + "s");

        Master_Ctrl_Mng_InjecVlv_Setp_Text.setText(Master_Ctrl_Mng_InjecVlv_Setp + "°C");
        Master_Ctrl_Mng_InjecVlv_Offset_Text.setText(Master_Ctrl_Mng_InjecVlv_Offset + "°C");
        Master_Ctrl_Mng_Injec_MaxTime_Text.setText(Master_Ctrl_Mng_Injec_MaxTime + "s");

        Master_Ctrl_Mng_Injec_ReStart_Delay_Text.setText(Master_Ctrl_Mng_Injec_ReStart_Delay + "s");
    }
    });

var FlushControl = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function CompControl ()
    {
        Phaser.Scene.call(this, { key: 'FlushControl' });
    },

    preload: function ()
    {
        this.load.image('fcbackground', 'phaser/flushcontrol.png');
        this.load.image('buttonmask', 'phaser/buttonmask.png')
    },

    create: function ()
    {
        this.add.image(600, 300, 'fcbackground');
        LoadMenuButtons(this);

        Flush_Valve_Flush_Week_Set_Text = this.add.text(255 , 170, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Flush_Valve_Flush_Hour_Set_Text = this.add.text(255 , 217, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Flush_Valve_Flush_Minute_Set_Text = this.add.text(255 , 267, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Flush_Valve_Flush_Time_Text = this.add.text(255 , 316, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        //Flush = this.add.text(923 , 166, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
    },

    update: function (){
        Flush_Valve_Flush_Week_Set_Text.setText(Flush_Valve_Flush_Week_Set);
        Flush_Valve_Flush_Hour_Set_Text.setText(Flush_Valve_Flush_Hour_Set);
        Flush_Valve_Flush_Minute_Set_Text.setText(Flush_Valve_Flush_Minute_Set);
        Flush_Valve_Flush_Time_Text.setText(Flush_Valve_Flush_Time + "s");
        //Flush_Valve_Manual_On_Flush_Text.setText(Flush_Valve_Manual_On_Flush + "s") wrong needs to be fixed;
    }
    });

var FanControl = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function FanControl ()
    {
        Phaser.Scene.call(this, { key: 'FanControl' });
    },

    preload: function ()
    {
        this.load.image('fancbackground', 'phaser/fancontrol.png');
        this.load.image('buttonmask', 'phaser/buttonmask.png')
    },

    create: function ()
    {
        this.add.image(600, 300, 'fancbackground');
        LoadMenuButtons(this);
        Hot_Fan_Text = this.add.text(310 , 150, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        
        Hot_Return_Temp_Text = this.add.text(310 , 180, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Hot_Supply_Temp_Text = this.add.text(310 , 210, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });

        Master_Ctrl_Mng_Fan_Setp_Text = this.add.text(760 , 145, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Master_Ctrl_Mng_Fan_Diff_Text = this.add.text(1095 , 145, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        
        Master_Ctrl_Mng_Fan_HRT_Diff_Text = this.add.text(180 , 338, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        Master_Ctrl_Mng_Fan_CRT_Diff_Text = this.add.text(180 , 388, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });

        EleHeater_Mng_EleH_Setp_Text = this.add.text(760 , 342, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        EleHeater_Mng_EBT_Ele_Setp_Text = this.add.text(760 , 398, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });

        EleHeater_Mng_EleH_Offset_Text = this.add.text(1095 , 342, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });

    },

    update: function (){
        if (Hot_Fan === 0){Hot_Fan_Text.setText("OFF");}
        else{Hot_Fan_Text.setText("ON");}
        Master_Ctrl_Mng_Fan_Setp_Text.setText(Master_Ctrl_Mng_Fan_Setp + "°C");
        Hot_Return_Temp_Text.setText(Hot_Return_Temp + "°C");
        Hot_Supply_Temp_Text.setText(Hot_Supply_Temp + "°C");
        Master_Ctrl_Mng_Fan_Diff_Text.setText(Master_Ctrl_Mng_Fan_Diff + "°C");
        Master_Ctrl_Mng_Fan_HRT_Diff_Text.setText(Master_Ctrl_Mng_Fan_HRT_Diff + "°C");
        Master_Ctrl_Mng_Fan_CRT_Diff_Text.setText(Master_Ctrl_Mng_Fan_CRT_Diff + "°C");
        EleHeater_Mng_EleH_Setp_Text.setText(EleHeater_Mng_EleH_Setp + "°C");
        EleHeater_Mng_EBT_Ele_Setp_Text.setText(EleHeater_Mng_EBT_Ele_Setp + "°C");
        EleHeater_Mng_EleH_Offset_Text.setText(EleHeater_Mng_EleH_Offset + "°C");
    }
    });

var ProbeControl = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function ProbeControl ()
    {
        Phaser.Scene.call(this, { key: 'ProbeControl' });
    },

    preload: function ()
    {
        this.load.image('pcbackground', 'phaser/probecontrol.png');
        this.load.image('buttonmask', 'phaser/buttonmask.png')
    },

    create: function ()
    {
        this.add.image(600, 300, 'pcbackground');
        LoadMenuButtons(this);
    },

    update: function (){

    }
    });

var EEVControl = new Phaser.Class({

Extends: Phaser.Scene,

initialize:

function EEVControl ()
{
    Phaser.Scene.call(this, { key: 'EEVControl' });
},

preload: function ()
{
    this.load.image('eevbackground', 'phaser/eevcontrol.png');
    this.load.image('buttonmask', 'phaser/buttonmask.png')
    this.load.image('arrowmask', 'phaser/arrowmask.png')
},

create: function ()
{
    this.add.image(600, 300, 'eevbackground');
    LoadMenuButtons(this);
    var nextArrow = this.add.image(1130,410, 'arrowmask');
    nextArrow.setInteractive();
    nextArrow.on('pointerdown', () => { 
    this.scene.start("EEVControl2");
    console.log("pressed!");
    });
},

update: function (){

}
});

var EEVControl2 = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function EEVControl2 ()
    {
        Phaser.Scene.call(this, { key: 'EEVControl2' });
    },

    preload: function ()
    {
        this.load.image('eev2background', 'phaser/eevcontrol2.png');
        this.load.image('buttonmask', 'phaser/buttonmask.png')
        this.load.image('arrowmask', 'phaser/arrowmask.png')
    },

    create: function ()
    {
        var nextArrow = this.add.image(1130,410, 'arrowmask');
        nextArrow.setInteractive();
        nextArrow.on('pointerdown', () => { 
        this.scene.start("EEVControl3");
        console.log("pressed!");
        });

        var backArrow = this.add.image(70,410, 'arrowmask');
        backArrow.setInteractive();
        backArrow.on('pointerdown', () => { 
        this.scene.start("EEVControl");
        console.log("pressed!");
        });

        this.add.image(600, 300, 'eev2background');
        LoadMenuButtons(this);
    },

    update: function (){

    }
    });

var EEVControl3 = new Phaser.Class({

Extends: Phaser.Scene,

initialize:

function EEVControl3 ()
{
    Phaser.Scene.call(this, { key: 'EEVControl3' });
},

preload: function ()
{
    this.load.image('eev3background', 'phaser/eevcontrol3.png');
    this.load.image('buttonmask', 'phaser/buttonmask.png')
    this.load.image('arrowmask', 'phaser/arrowmask.png')
},

create: function ()
{
    this.add.image(600, 300, 'eev3background');
    LoadMenuButtons(this);
    

    var backArrow = this.add.image(70,410, 'arrowmask');
    backArrow.setInteractive();
    backArrow.on('pointerdown', () => { 
    this.scene.start("EEVControl2");
    console.log("pressed!");
    });
},

update: function (){

}
});

var PumpControl = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function PumpControl ()
    {
        Phaser.Scene.call(this, { key: 'PumpControl' });
    },

    preload: function ()
    {
        this.load.image('pumpbackground', 'phaser/pumpcontrol.png');
        this.load.image('buttonmask', 'phaser/buttonmask.png')
    },

    create: function ()
    {
        this.add.image(600, 300, 'pumpbackground');
        LoadMenuButtons(this);

        //hot pumps
        PVlv_Mng_HotVlv_Setp_Text = this.add.text(230 , 165, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_Hot_Min_Op_Text = this.add.text(230 , 195, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_Hot_Max_Op_Text = this.add.text(230 , 223, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_Hot_Op_ProAl_Text = this.add.text(230 , 250, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' }); 
        PVlv_Mng_HotVlv_DeadBand_Text = this.add.text(230 , 278, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_HotVlv_Kp_Text = this.add.text(230 , 305, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_HotVlv_Ti_Text = this.add.text(230 , 332, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_HotVlv_Td_Text = this.add.text(230 , 360, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });

        //cold pumps
        PVlv_Mng_ColdVlv_Setp_Text = this.add.text(850 , 165, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_Cold_Min_Op_Text = this.add.text(850 , 195, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_Cold_Max_Op_Text = this.add.text(850 , 223, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_Cold_Op_ProAl_Text = this.add.text(850 , 250, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_ColdVlv_DeadBand_Text = this.add.text(850 , 278, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_ColdVlv_Kp_Text = this.add.text(850 , 305, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_ColdVlv_Ti_Text = this.add.text(850 , 332, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });
        PVlv_Mng_ColdVlv_Td_Text = this.add.text(850 , 360, " ", { fontFamily: 'System', fontSize: 22, color: '#ffffff' });

    },

    update: function (){

        PVlv_Mng_ColdVlv_Setp_Text.setText(PVlv_Mng_ColdVlv_Setp + "°C");
        PVlv_Mng_Cold_Min_Op_Text.setText(PVlv_Mng_Cold_Min_Op + "%");
        PVlv_Mng_Cold_Max_Op_Text.setText(PVlv_Mng_Cold_Max_Op + "%");
        PVlv_Mng_Cold_Op_ProAl_Text.setText(PVlv_Mng_Cold_Op_ProAl + "%");
        PVlv_Mng_ColdVlv_DeadBand_Text.setText(PVlv_Mng_ColdVlv_DeadBand);
        PVlv_Mng_ColdVlv_Kp_Text.setText(PVlv_Mng_ColdVlv_Kp);
        PVlv_Mng_ColdVlv_Ti_Text.setText(PVlv_Mng_ColdVlv_Ti);
        PVlv_Mng_ColdVlv_Td_Text.setText(PVlv_Mng_ColdVlv_Td);

        PVlv_Mng_HotVlv_Setp_Text.setText(PVlv_Mng_HotVlv_Setp + "°C");
        PVlv_Mng_Hot_Min_Op_Text.setText(PVlv_Mng_Hot_Min_Op + "%");
        PVlv_Mng_Hot_Max_Op_Text.setText(PVlv_Mng_Hot_Max_Op + "%");
        PVlv_Mng_Hot_Op_ProAl_Text.setText(PVlv_Mng_Hot_Op_ProAl + "%");
        PVlv_Mng_HotVlv_DeadBand_Text.setText(PVlv_Mng_HotVlv_DeadBand);
        PVlv_Mng_HotVlv_Kp_Text.setText(PVlv_Mng_HotVlv_Kp);
        PVlv_Mng_HotVlv_Ti_Text.setText(PVlv_Mng_HotVlv_Ti);
        PVlv_Mng_HotVlv_Td_Text.setText(PVlv_Mng_HotVlv_Td);
    }
    });

var ValveControl = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function ValveControl ()
    {
        Phaser.Scene.call(this, { key: 'ValveControl' });
    },

    preload: function ()
    {
        this.load.image('valvebackground', 'phaser/valvecontrol.png');
        this.load.image('buttonmask', 'phaser/buttonmask.png')
    },

    create: function ()
    {
        this.add.image(600, 300, 'valvebackground');
        LoadMenuButtons(this);
    },

    update: function (){

    }
    });

var ChangeBool = new Phaser.Class({

    Extends: Phaser.Scene,

    initialize:

    function ChangeBool ()
    {
        Phaser.Scene.call(this, { key: 'ChangeBool' });
    },

    preload: function ()
    {
        this.load.image('pumpbackground', 'phaser/pumpcontrol.png');
        this.load.image('buttonmask', 'phaser/buttonmask.png')
    },

    create: function ()
    {
        this.add.image(600, 300, 'pumpbackground');
        LoadMenuButtons(this);
    },

    update: function (){

    }
    });

var config = {
        type: Phaser.AUTO,
        scale: {
            parent: 'phaserdiv',
            mode: Phaser.Scale.FIT,
            autoCenter: Phaser.Scale.CENTER_BOTH,
            width: 1200,
            height: 600
        },
        scene: [ChooseDeviceMenu, MonitoringDiagramScreen,SystemControl,CompControl,FlushControl,FanControl,
        ProbeControl,EEVControl,EEVControl2,EEVControl3,PumpControl,ValveControl]
    };

var game = new Phaser.Game(config);

function LoadMenuButtons(sceneobj)
{
    if (userAccessLevel === 1){
        var chooseDeviceMenuButton = sceneobj.add.image(40,30, 'buttonmask');
        chooseDeviceMenuButton.setInteractive();
        chooseDeviceMenuButton.on('pointerdown', () => {sceneobj.scene.start("ChooseDeviceMenu");
        chosenDevice = null;
        chosenDeviceName = null;
        diagramTimeText = null;
        diagramStatusText = null;
    });

        var diagramViewButton = sceneobj.add.image(90,545, 'buttonmask');
            diagramViewButton.setInteractive();
            diagramViewButton.on('pointerdown', () => {sceneobj.scene.start("MonitoringDiagramScreen");});
            
        var systemControlButton = sceneobj.add.image(1100,545, 'buttonmask');
            systemControlButton.setInteractive();
            systemControlButton.on('pointerdown', () => {sceneobj.scene.start("ValveControl");});

        var compControlButton = sceneobj.add.image(240,545, 'buttonmask');
            compControlButton.setInteractive();
            compControlButton.on('pointerdown', () => { sceneobj.scene.start("CompControl");});

        var flushControlButton = sceneobj.add.image(380,545, 'buttonmask');
            flushControlButton.setInteractive();
            flushControlButton.on('pointerdown', () => {sceneobj.scene.start("FlushControl");});

        var fanControlButton = sceneobj.add.image(525,545, 'buttonmask');
            fanControlButton.setInteractive();
            fanControlButton.on('pointerdown', () => {sceneobj.scene.start("FanControl");});

        var probeControlButton = sceneobj.add.image(675,545, 'buttonmask');
            probeControlButton.setInteractive();
            probeControlButton.on('pointerdown', () => {sceneobj.scene.start("ProbeControl");});

        var eevControlButton = sceneobj.add.image(805,545, 'buttonmask');
            eevControlButton.setInteractive();
            eevControlButton.on('pointerdown', () => {sceneobj.scene.start("EEVControl");});

        var pumpControlButton = sceneobj.add.image(960,545, 'buttonmask');
            pumpControlButton.setInteractive();
            pumpControlButton.on('pointerdown', () => {sceneobj.scene.start("PumpControl");});
    }
}




/* console.log(game.scale);
        game.scale.updateCenter();
        game.scale.setGameSize(1200,600);
        game.scale.setParentSize(1200,600);
        console.log(game.scale); */
//game.scale.parentIsWindow = true;
/* game.scale.on('enterfullscreen', function() {console.log("entered!")}); */
/* console.log(game.scale); */
/* game.scale.setParentSize(1200, 600);     */
//game.scale.parent = "p2";
/* game.scale.startFullscreen(); */
/* game.scale.mode = FIT; */
//game.scale.stopFullscreen();
//game.scale.parent = "phaserdiv";
/* game.scale.setParentSize(1200, 600); */
</script>


<script>
//coil variables
var EleHeater_Mng_Hot_Ele_Man_Msk = 0;
var AlarmMng_AlrmResByBms = 0;
var OnOffUnitMng_KeybOnOff = 0;
var Flush_Valve_Op_ColdVlv_Al = 0;
var Flush_Valve_Manual_On_Flush = 0;
var Master_Ctrl_Mng_Rot_CP = 0;
var Master_Ctrl_Mng_Rot_HP = 0;
var Input_Mng_Dis_Probe = 0;

var EleHeater_Mng_Hot_Ele_Man_Msk_Text;
var AlarmMng_AlrmResByBms_Text;
var OnOffUnitMng_KeybOnOff_Text;
var Flush_Valve_Op_ColdVlv_Al_Text;
var Flush_Valve_Manual_On_Flush_Text;
var Master_Ctrl_Mng_Rot_CP_Text;
var Master_Ctrl_Mng_Rot_HP_Text;
var Input_Mng_Dis_Probe_Text;

//discrete input variables
var Cold_EleHeater = 0;
var Hot_P1 = 0;
var Hot_Solend1 = 0;
var Hot_EleHeater = 0;
var Glob_Al = 0;
var Hot_P2 = 0;
var Hot_Fan = 0;
var Blance_Vlv = 0;
var Injection_Vlv = 0;
var Hot_Solend2 = 0;
var Cold_P1 = 0;
var HotW_FlowS1 = 0; 
var ColdW_FlowS = 0;
var High_P = 0;
var Low_P = 0;
var Comp_Overload = 0;
var Master_Slave = 0;
var Cold_P_Switch = 0;
var Al_retain_Active = 0;
var Al_Err_retain_write_Active = 0; 
var Alrm_Prob1_Active = 0;
var Alrm_Prob2_Active = 0;
var Alrm_Prob3_Active = 0;
var Alrm_Prob4_Active = 0;
var Alrm_Prob5_Active = 0;
var Alrm_Prob6_Active = 0;
var Alrm_Prob7_Active = 0;
var Alrm_Prob8_Active = 0;
var Alrm_Prob9_Active = 0;
var Alrm_Prob10_Active = 0;
var Hot1_Flow_Al_Active = 0;
var Hot2_Flow_Al_Active = 0;
var ColdFlow_Al_Active = 0;
var HP_Al_Active = 0;
var LP_Al_Active = 0;
var Comp_Oload_Al_Active = 0; 
var High_DiscT_Al_Active = 0;
var Fan_Over_Al_Active = 0;
var Low_SuctT_Al_Active = 0;
var Board2_Offline = 0;
var Comp_On = 0;
var Flush_Valve_Flush_Valve_On = 0;
var Flush_Valve_Cold_SuplyW_Vlv = 0;
var Alrm_Prob11_Active = 0;
var Alrm_Prob12_Active = 0;
var Alrm_Master_Unit_Active = 0;
var Alrm_Slave_Unit_Active = 0;
var Alrm_Low_EvapInT_Active = 0;
var Alrm_Low_HT1_Active = 0;
var Alrm_High_CT1_Active = 0;
var Al_Warm_Supply_Low_Active = 0;
var Al_Warm_Supply_High_Active = 0;
var AlarmMng_Read_Ain1_Al = 0;
var AlarmMng_Read_Ain2_Al = 0;
var AlarmMng_Read_Ain3_Al = 0;
var Read_Ain4_Al = 0;
var Read_Ain5_Al = 0;
var Read_Ain6_Al = 0;
var AlarmMng_Read_Ain11_Al = 0;
var AlarmMng_Read_Ain8_Al = 0;
var AlarmMng_Read_Ain9_Al = 0;
var Cold_P2 = 0;
var LowP_SenserRead_Active = 0;
var HighP_SenserRead_Active = 0;

var Cold_EleHeater_Text;
var Hot_P1_Text;
var Hot_Solend1_Text;
var Hot_EleHeater_Text;
var Glob_Al_Text;
var Hot_P2_Text;
var Hot_Fan_Text;
var Blance_Vlv_Text;
var Injection_Vlv_Text;
var Hot_Solend2_Text;
var Cold_P1_Text;
var HotW_FlowS1_Text; 
var ColdW_FlowS_Text;
var High_P_Text;
var Low_P_Text;
var Comp_Overload_Text;
var Master_Slave_Text;
var Cold_P_Switch_Text;
var Al_retain_Active_Text;
var Al_Err_retain_write_Active_Text; 
var Alrm_Prob1_Active_Text;
var Alrm_Prob2_Active_Text;
var Alrm_Prob3_Active_Text;
var Alrm_Prob4_Active_Text;
var Alrm_Prob5_Active_Text;
var Alrm_Prob6_Active_Text;
var Alrm_Prob7_Active_Text;
var Alrm_Prob8_Active_Text;
var Alrm_Prob9_Active_Text;
var Alrm_Prob10_Active_Text;
var Hot1_Flow_Al_Active_Text;
var Hot2_Flow_Al_Active_Text;
var ColdFlow_Al_Active_Text;
var HP_Al_Active_Text;
var LP_Al_Active_Text;
var Comp_Oload_Al_Active_Text; 
var High_DiscT_Al_Active_Text;
var Fan_Over_Al_Active_Text;
var Low_SuctT_Al_Active_Text;
var Board2_Offline_Text;
var Comp_On_Text;
var Flush_Valve_Flush_Valve_On_Text;
var Flush_Valve_Cold_SuplyW_Vlv_Text;
var Alrm_Prob11_Active_Text;
var Alrm_Prob12_Active_Text;
var Alrm_Master_Unit_Active_Text;
var Alrm_Slave_Unit_Active_Text;
var Alrm_Low_EvapInT_Active_Text;
var Alrm_Low_HT1_Active_Text;
var Alrm_High_CT1_Active_Text;
var Al_Warm_Supply_Low_Active_Text;
var Al_Warm_Supply_High_Active_Text;
var AlarmMng_Read_Ain1_Al_Text;
var AlarmMng_Read_Ain2_Al_Text;
var AlarmMng_Read_Ain3_Al_Text;
var Read_Ain4_Al_Text;
var Read_Ain5_Al_Text;
var Read_Ain6_Al_Text;
var AlarmMng_Read_Ain11_Al_Text;
var AlarmMng_Read_Ain8_Al_Text;
var AlarmMng_Read_Ain9_Al_Text;
var Cold_P2_Text;
var LowP_SenserRead_Active_Text;
var HighP_SenserRead_Active_Text;

//holding register variables
var Master_Ctrl_Mng_Fan_Setp = 0;
var Master_Ctrl_Mng_Cl_HotMainVlv_Delay = 0;
var Master_Ctrl_Mng_Hot_S2_OpenT = 0;
var Master_Ctrl_Mng_Comp_Setp = 0;
var Master_Ctrl_Mng_Comp_Diff = 0;
var Master_Ctrl_Mng_Comp_MinOn_T = 0;
var Master_Ctrl_Mng_Comp_MinOff_T = 0;
var Master_Ctrl_Mng_Comp_Start_Delay = 0;
var Master_Ctrl_Mng_BlanceVlv_Delay = 0;
var Master_Ctrl_Mng_InjecVlv_Setp = 0;
var Master_Ctrl_Mng_InjecVlv_Offset = 0;
var Master_Ctrl_Mng_Injec_MaxTime = 0;
var Master_Ctrl_Mng_Injec_ReStart_Delay = 0;
var EleHeater_Mng_EleH_Setp = 0;
var EleHeater_Mng_EleH_Offset = 0;
var PVlv_Mng_HotVlv_Setp = 0;
var PVlv_Mng_HotVlv_DeadBand = 0;
var PVlv_Mng_Hot_Min_Op = 0;
var PVlv_Mng_Hot_Max_Op = 0;
var PVlv_Mng_Cold_Min_Op = 0;
var PVlv_Mng_Cold_Max_Op = 0;
var PVlv_Mng_Hot_Op_ProAl = 0;
var PVlv_Mng_Cold_Op_ProAl = 0;
var PVlv_Mng_ColdVlv_Setp = 0;
var PVlv_Mng_ColdVlv_DeadBand = 0;
var Master_Ctrl_Mng_Hot_S1_Inter = 0;
var AlarmMng_High_DiscT_Setp = 0;
var AlarmMng_High_DiscT_Offset = 0;
var AlarmMng_Low_SuctT_Setp = 0;
var AlarmMng_Low_SuctT_Offset = 0;
var AlarmMng_High_DiscT_Delay = 0;
var AlarmMng_Low_SuctT_Delay = 0;
var Master_Ctrl_Mng_RunWFlow_Delay = 0;
var Flush_Valve_Flush_Week_Set = 0;
var Flush_Valve_Flush_Hour_Set = 0;
var Flush_Valve_Flush_Minute_Set = 0;
var Flush_Valve_Flush_Time = 0;
var Flow_Switch_Low_Level_Setp = 0;
var Flush_Valve_Cold_SupplyVlv_Setp = 0;
var PVlv_Mng_ColdVlv_Kp = 0;
var PVlv_Mng_ColdVlv_Ti = 0;
var PVlv_Mng_ColdVlv_Td = 0;
var PVlv_Mng_HotVlv_Kp = 0;
var PVlv_Mng_HotVlv_Ti = 0;
var PVlv_Mng_HotVlv_Td = 0;
var EleHeater_Mng_CRT_Ele_Setp = 0;
var EleHeater_Mng_CRT_Ele_Offset = 0;
var EleHeater_Mng_EBT_Ele_Setp = 0;
var EleHeater_Mng_EBT_Ele_Diff = 0;
var Flush_Valve_Hot_SupplyVlv_Setp = 0;
var Flush_Valve_Hot_SupplyVlv_Offset = 0;
var Flush_Valve_WSB_Supply_Setp = 0;
var Flush_Valve_WSB_Supply_Diff = 0;
var Flush_Valve_Cold_SupplyVlv_Offset = 0;
var Input_Mng_Ain1_Type_Sel = 0;
var Master_Ctrl_Mng_Rot_Type = 0;
var Master_Ctrl_Mng_Fan_Diff = 0;
var Master_Ctrl_Mng_Fan_HRT_Diff = 0;
var Master_Ctrl_Mng_Fan_CRT_Diff = 0;
var Master_Ctrl_Mng_Comp_CRT_Diff = 0;
var Master_Ctrl_Mng_Comp_HRT_Diff = 0;
var EVD_Emb_1_Min_OpPosc = 0;
var AlarmMng_LP_Setp = 0;
var AlarmMng_LP_Diff = 0;
var AlarmMng_HP_Setp = 0;
var AlarmMng_HP_Diff = 0;

var Master_Ctrl_Mng_Fan_Setp_Text;
var Master_Ctrl_Mng_Cl_HotMainVlv_Delay_Text;
var Master_Ctrl_Mng_Hot_S2_OpenT_Text;
var Master_Ctrl_Mng_Comp_Setp_Text;
var Master_Ctrl_Mng_Comp_Diff_Text;
var Master_Ctrl_Mng_Comp_MinOn_T_Text;
var Master_Ctrl_Mng_Comp_MinOff_T_Text;
var Master_Ctrl_Mng_Comp_Start_Delay_Text;
var Master_Ctrl_Mng_BlanceVlv_Delay_Text;
var Master_Ctrl_Mng_InjecVlv_Setp_Text;
var Master_Ctrl_Mng_InjecVlv_Offset_Text;
var Master_Ctrl_Mng_Injec_MaxTime_Text;
var Master_Ctrl_Mng_Injec_ReStart_Delay_Text;
var EleHeater_Mng_EleH_Setp_Text;
var EleHeater_Mng_EleH_Offset_Text;
var PVlv_Mng_HotVlv_Setp_Text;
var PVlv_Mng_HotVlv_DeadBand_Text;
var PVlv_Mng_Hot_Min_Op_Text;
var PVlv_Mng_Hot_Max_Op_Text;
var PVlv_Mng_Cold_Min_Op_Text;
var PVlv_Mng_Cold_Max_Op_Text;
var PVlv_Mng_Hot_Op_ProAl_Text;
var PVlv_Mng_Cold_Op_ProAl_Text;
var PVlv_Mng_ColdVlv_Setp_Text;
var PVlv_Mng_ColdVlv_DeadBand_Text;
var Master_Ctrl_Mng_Hot_S1_Inter_Text;
var AlarmMng_High_DiscT_Setp_Text;
var AlarmMng_High_DiscT_Offset_Text;
var AlarmMng_Low_SuctT_Setp_Text;
var AlarmMng_Low_SuctT_Offset_Text;
var AlarmMng_High_DiscT_Delay_Text;
var AlarmMng_Low_SuctT_Delay_Text;
var Master_Ctrl_Mng_RunWFlow_Delay_Text;
var Flush_Valve_Flush_Week_Set_Text;
var Flush_Valve_Flush_Hour_Set_Text;
var Flush_Valve_Flush_Minute_Set_Text;
var Flush_Valve_Flush_Time_Text;
var Flow_Switch_Low_Level_Setp_Text;
var Flush_Valve_Cold_SupplyVlv_Setp_Text;
var PVlv_Mng_ColdVlv_Kp_Text;
var PVlv_Mng_ColdVlv_Ti_Text;
var PVlv_Mng_ColdVlv_Td_Text;
var PVlv_Mng_HotVlv_Kp_Text;
var PVlv_Mng_HotVlv_Ti_Text;
var PVlv_Mng_HotVlv_Td_Text;
var EleHeater_Mng_CRT_Ele_Setp_Text;
var EleHeater_Mng_CRT_Ele_Offset_Text;
var EleHeater_Mng_EBT_Ele_Setp_Text;
var EleHeater_Mng_EBT_Ele_Diff_Text;
var Flush_Valve_Hot_SupplyVlv_Setp_Text;
var Flush_Valve_Hot_SupplyVlv_Offset_Text;
var Flush_Valve_WSB_Supply_Setp_Text;
var Flush_Valve_WSB_Supply_Diff_Text;
var Flush_Valve_Cold_SupplyVlv_Offset_Text;
var Input_Mng_Ain1_Type_Sel_Text;
var Master_Ctrl_Mng_Rot_Type_Text;
var Master_Ctrl_Mng_Fan_Diff_Text;
var Master_Ctrl_Mng_Fan_HRT_Diff_Text;
var Master_Ctrl_Mng_Fan_CRT_Diff_Text;
var Master_Ctrl_Mng_Comp_CRT_Diff_Text;
var Master_Ctrl_Mng_Comp_HRT_Diff_Text;
var EVD_Emb_1_Min_OpPosc_Text;
var AlarmMng_LP_Setp_Text;
var AlarmMng_LP_Diff_Text;
var AlarmMng_HP_Setp_Text;
var AlarmMng_HP_Diff_Text;


//input register values
var Suct_Temp = 0;
var Evap_Inlet_Temp = 0;
var Cond_Outlet_Temp = 0;
var Hot_Supply_Temp = 0;
var Hot_Return_Temp = 0;
var Cold_Supply_Temp = 0;
var Cold_Return_Temp = 0;
var Hot_Tank_Temp1 = 0;
var Hot_Tank_Temp2 = 0;
var HP_Yout1_Act = 0;
var HP_Yout2_Act = 0;
var Disc_Temp = 0;
var Flow_Switch_Read_Cold_FlowS1 = 0;
var Flow_Switch_Read_Hot_FlowS1 = 0;
var Flow_Switch_Read_Hot_FlowS2 = 0;
var ColdFlow_Senser_Al_Active = 0;
var HotFlow1_Senser_Al_Active = 0;
var HotFlow2_Senser_Al_Active = 0;
var Flow_Switch_ColdFS1_Feq = 0;
var Flow_Switch_ColdFS_Char = 0;
var Flow_Switch_HotFS1_Feq = 0;
var Flow_Switch_HotFS1_Char = 0;
var Flow_Switch_HotFS2_Feq = 0;
var Flow_Switch_HotFS2_Char = 0;
var Hot_Tank_Temp3 = 0;
var Cold_Tank_Temp1 = 0;
var Cold_Tank_Temp2 = 0;
var Cold_Tank_Temp3 = 0;
var Cold_SupToVlv_Temp = 0;
var Warm_ToBuild_Temp = 0;
var Warm_ReturnBuild_Temp = 0;
var Hot_SupToVlv_Temp = 0;
var Ele_Boost_Temp = 0;
var Heat_Exchange_Cold = 0;
var Heat_Exchange_Hot = 0;
var EVD_Emb_1_Params_EVDEMB_1_EVD_Variables_EEV_PosSteps_Val = 0;
var EVD_Emb_1_Params_EVDEMB_1_EVD_Variables_EEV_PosPercent_Val = 0;
var CP_Yout1_Act = 0;
var CP_Yout2_Act = 0;
var Flow_Switch_ColdFS2_Char = 0;
var Low_Pressure = 0;
var High_Pressure = 0;

var Suct_Temp_Text;
var Evap_Inlet_Temp_Text;
var Cond_Outlet_Temp_Text;
var Hot_Supply_Temp_Text;
var Hot_Return_Temp_Text;
var Cold_Supply_Temp_Text;
var Cold_Return_Temp_Text;
var Hot_Tank_Temp1_Text;
var Hot_Tank_Temp2_Text;
var HP_Yout1_Act_Text;
var HP_Yout2_Act_Text;
var Disc_Temp_Text;
var Flow_Switch_Read_Cold_FlowS1_Text;
var Flow_Switch_Read_Hot_FlowS1_Text;
var Flow_Switch_Read_Hot_FlowS2_Text;
var ColdFlow_Senser_Al_Active_Text;
var HotFlow1_Senser_Al_Active_Text;
var HotFlow2_Senser_Al_Active_Text;
var Flow_Switch_ColdFS1_Feq_Text;
var Flow_Switch_ColdFS_Char_Text;
var Flow_Switch_HotFS1_Feq_Text;
var Flow_Switch_HotFS1_Char_Text;
var Flow_Switch_HotFS2_Feq_Text;
var Flow_Switch_HotFS2_Char_Text;
var Hot_Tank_Temp3_Text;
var Cold_Tank_Temp1_Text;
var Cold_Tank_Temp2_Text;
var Cold_Tank_Temp3_Text;
var Cold_SupToVlv_Temp_Text;
var Warm_ToBuild_Temp_Text;
var Warm_ReturnBuild_Temp_Text;
var Hot_SupToVlv_Temp_Text;
var Ele_Boost_Temp_Text;
var Heat_Exchange_Cold_Text;
var Heat_Exchange_Hot_Text;
var EVD_Emb_1_Params_EVDEMB_1_EVD_Variables_EEV_PosSteps_Val_Text;
var EVD_Emb_1_Params_EVDEMB_1_EVD_Variables_EEV_PosPercent_Val_Text;
var CP_Yout1_Act_Text;
var CP_Yout2_Act_Text;
var Flow_Switch_ColdFS2_Char_Text;
var Low_Pressure_Text;
var High_Pressure_Text;
</script>


